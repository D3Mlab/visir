%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 591.000000 23.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.2 (Build 17C88) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 591 23
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 591 23
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Courier
%!FontType1-1.0: Courier 1.0000.1.0000
14 dict begin/FontName /Courier def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /G put
dup 34 /r put
dup 35 /e put
dup 36 /d put
dup 37 /y put
dup 38 /O put
dup 39 /p put
dup 40 /t put
dup 41 /i put
dup 42 /m put
dup 43 /a put
dup 44 /l put
dup 45 /D put
dup 46 /c put
dup 47 /h put
dup 48 /o put
dup 49 /I put
dup 50 /n put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1341 1 index div -838 2 index div 2177 3 index div 2231 5 -1 roll div]cvx def
/sfnts [<




34003332001514062B0125212E01232206011408B39B7501141D1E282A2E64D569E4FEEE0122E9D301162F680FFD65028B0FA97B85B601A2909D7D261C1D301731340107D9DD0112FF00B638268377918C000000000100640000047B051D00390116BB002B0006003600042BBB00140006001F00042BB8002B10B900000004F4B8003610B80005D0B800052FB8002B10B8000CD0B8000010B9002F0006F4BA000D0000002F111239B8001410B900230004F4B900180006F4B8001410B8003BDC00B800004558B800102F1BB90010000B3E59B800004558B8001B2F1BB9001B00073E59B800004558B800322F1BB9003200073E59BB00080001000200042BB8003210B900000001F4B8001010B900270003F4410500E9002700F9002700025D41170038002700480027005800270068002700780027008800270098002700A8002700B8002700C8002700D80027000B5DBA000D00100027111239B8000010B80014D0B80015D0B80022D0B80023D0B8002BD0B8002CD0303137112322263534363B01321615113E013332161511333216151406232122263534363B0111342623220615113332161514062321222635343633EE1344332927981B1E498F4D97AD2F322C2828FEF62F212939236A65679B233C2A212FFEF627272F448D0400202824241613FE3B4441BCA6FE3B212424241F29281D01A0757B8A66FE601E27291F2424281D000200A6000004500560000B00270067BA0027002000032BB8002710B900000006F4B8002710B9001B0004F400B800004558B800232F1BB90023000B3E59B800004558B800132F1BB9001300073E59BB00030003000900042BB8001310B9000C0001F4B8001AD0B8001BD0B8002310B9001C0001F4303101343633321615140623222613213216151406232122263534363321112322263534363321321615020A27403E2825414027B901412725232FFCF828282A2A0131C3292B282801251B1F04BC6C382F58562926FC0D2124291F242423220281252323231613000100BA0000043D051D001B004ABA000C001700032BB8000C10B900000004F4B8000C10B80004DC00B800004558B800132F1BB9001300073E59BB00080001000000042BB8001310B9000C0001F4B8001AD0B8001BD03031012322263534363321321615112132161514062321222635343633210223AA61312927014A1B1E013A2623222FFD1E27292A2A0115048D1F2924241613FB992124291F24242322000001FFFE000004E703B6004F015BBB00370006003000042BBB00070004001300042BBB00430004000000042BB8001310B9000B0006F4B8001310B80015D041170036003700460037005600370066003700760037008600370096003700A6003700B6003700C6003700D60037000B5D410500E5003700F5003700025DB8003710

00090096000900A6000900B6000900C6000900D60009000B5D410500E5000900F5000900025DB8000310B9000C0006F4B80019DC00B800004558B800152F1BB90015000B3E59B800004558B8000F2F1BB9000F00073E59B900000001F441170037000000470000005700000067000000770000008700000097000000A7000000B7000000C7000000D70000000B5D410500E6000000F6000000025DB8001510B900060001F4410500E9000600F9000600025D41170038000600480006005800060068000600780006008800060098000600A8000600B8000600C8000600D80006000B5D303125323635342623220615141601140023220035340033320002669AC5C69999C5C402A7FEDCE9E8FEDC0124E8E8012573C39797C5C59798C2015AD6FEF00110D6D6010FFEF0000000020042FE710483039E002800340183BB00320006001400042BBB00220006002C00042B41170036003200460032005600320066003200760032008600320096003200A6003200B6003200C6003200D60032000B5D410500E5003200F5003200025DB8003210B80000D0B800002FB8003210B900100004F4B80004DCB8001410B8000BD0B8003210B8001BD0B8001B2F410500EA002C00FA002C00025D41170039002C0049002C0059002C0069002C0079002C0089002C0099002C00A9002C00B9002C00C9002C00D9002C000B5DB8002210B80036DC00B800004558B800172F1BB90017000B3E59B800004558B8001F2F1BB9001F000B3E59B800004558B800072F1BB9000700093E59B800004558B800252F1BB9002500073E59B8000710B900000001F4B8000ED0B8000FD0B8001710B900100003F4BA001C00170010111239B8002510B900290001F441170037002900470029005700290067002900770029008700290097002900A7002900B7002900C7002900D70029000B5D410500E6002900F6002900025DB8001010B8002FD0303101333216151406232122263534363B01112322263534363B0132161D013E01333200151404232226272532363534262322061514160164F02626252FFE4728293345131345332928981E1B44A55FC9010EFF00C76AB23C01368BB2B38A8AB0AFFF002424272024232820040E202823231415614646FEF0CDC5FE4B4602AF8B88B1B0898AB00001006D0000046F03B4002B007EBA0000000B00032BB8000010B9000F0004F4B8000010B80014DCB8000010B8001BD000B800004558B800172F1BB90017000B3E59B800004558B8001F2F1BB9001F000B3E59B800004558B800072F1BB9000700073E59B900000001F4B8000ED0B8000FD0B8001710B900100001F4BA001C0007001F111239B80028D0303125213216151406232122263534363B01112322263534363B0132161D013E01333216151406232226232206070204014C


00>] def
/CharStrings 21 dict dup begin
/.notdef 0 def
/D 1 def
/G 2 def
/I 3 def
/O 4 def
/a 5 def
/c 6 def
/d 7 def
/e 8 def
/h 9 def
/i 10 def
/l 11 def
/m 12 def
/n 13 def
/o 14 def
/p 15 def
/r 16 def
/t 17 def
/y 18 def
/Omegagreek 19 def
/Omegagreek.mono 20 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1341 -838 2177 2231}def
/UniqueID 4459673 def
currentdict currentfile eexec


654C9B66930B0B73C65CA4C3C54F2FC1C567F813A2E9D6DA42FFFF09B6007FB781FA246241C01E35412D7F83CBEFEE0DC00AD50208D78E4F0016384D20605F0CD08C9807F3CDB4610CE883C971B2E71206551E5479E8B8159AD49A32CB510D2DB0082D67B164D6E6BACB528BB8A145866BF4E387FAF40B3ACB5F0A1382EDED26349BFE1555DE35B647BDC9B250C28EB26B17CFAF7556F768CF3A525383F358AC3EAE925FF7274003B51AC8DADC36621A19AE485042C9F312686CE88F22E1A2E0BB4BEEF58D35C98C9AE0BE8799AAC599AE182C3FE13B1A6609D1F10A822A98442DA9C40AB7CC279F3E4415909BDF9B62D0298ECB7CC4BA5D4A421D58A7FF621A55964451D439F738451B2B328CDB3C995270A3E4A962CAF5A373E58BE182395D92F838A1B59A180F6CB7A110A2C2C3E3CE19A7E103328A607108B22D0EE088348D234894005FE41DB42CA748C7B1CBE9C26E25D2DC6EDD1E756E68ED99B28E24A03EF0706106EA0F1CBE3A2CB59E0CA0B45BF0618717BE4652F90B213CE8BCD48B7F53BA768D8D6E4A03C21A2312B21893B7E4E8D5F60CEE4DE5378B0639156BB405E86E682EAB3E579A1EF2876C9ECEFF192FEAE6548616D36F3DFE46311A26D275709F81F333656F395063CE0A64D7134EC028050B97E37DB31F4281F98BBD86D254DE5383E19AD2C3FF4CC0465523336B5343CA06F816AEE523D30FA0148526FC7CDACA39C7B4AED59ACEEE9C21F292717AB0C9CA52F6C9CD6A77236EA5F6B2F800FC560149FF1864F823F9EDF66B63E54EC9EA47E423A23AEFE7FCAFA60216948FE66A4C1D399E1C8880803E6E9DE1E0274D9540DF5796A24583118EE470AD03AF825EE4870D8B522256AFB54EB8DE274B884D4C510B8A6AC18DA9AD88F81563E3044AC27E3BDB3AF86617F6BAAF05119D3436A304A4341A188949AE7CE2CED16DCB75D34C134EDFAA1F90127535250B927AD72C3F2B31E7C69F1C14F0B4111DD8F85ACE6B2979C039CD6FA32203ABB748A62F253FE48B96981FECE2464838FAE32347785A51E97673BB5A44FA8F22B3139075F1B143021F965C6AB212F7B4D84C19D27CAF081F38652B9501FCD13039A67204A7EE2C0B4C3AE5F4A5708C9FB2798EF902C5CF84A1FE664C388F26A2C6404D22CA9CEDAEB61A075EF4C4ED84E74142D47BC834E74CA4EA41EDC0B7867AB4AB0319E162B2545656DC98C71DBA1CFBB957F235498C9CAA96C52C68E6CC93D43B9B1BCAD81E9666487C51C976CD340AC9E28F4E4B4C1A9AE2BCC8D4162027C3284FF4148BB6296AFDCFDC33A154BD3F3C315FCE81C87022E0C1F113E37E5AD05C7E4B175C2C3605C5D2D5A644751347F6F3FC4848F19503013B2BE957AC21992FBB96EDFEF867F6BB8A79CC6CFCE1570D21CCB2369F37039CA9717B16F02FE075C67B909EB774D7941AA8B904
708DC3D6E78800A4B542CF4B89779A6A0B8D2F2F8B1D13A4E544B741F5196ADA17DFFD49305AC3DEE6D542E73B1C8D69956687F56B712C7B0BBB834F27787934AFC553E2CC25E514EC06C0D56ADE31461A8D16E810BCA6F29A1F41F310D3BB715811BEF15C42A21E5C6328D24AE8857F2162407C358AB1ADC85050F32333DCCE7CDA5D3E76E438C9E9A193EC96BDD7FCE88849D2ED865343267DE164D2F4AD07516D667305454C3D31586E29DE1646A1C30227D108BE7F178E5F3D3E566EAD333EBF46C004C0170B0DCD21FEF7EC9AA63EFEBDC79A63778D4DECA834EA42921B8396A3092A445FCEE7A55B7C5BD931F5C4DB722331CF7B9AEA575991B2967EB0DF05E09066383F7F6CD3B57B0F775F23DEF4E91256B22961EE652FBEE1DCCCE4FE7DD98335E7FE9FAE2DED0E3E7F7A38EDAD1238981E1DEC211E74EE1A07349369E85FE9AEB85EF82325627B03671FB795C72C2F504830F0524151B049F57EA08CFBA1FD63C49A4841E64352EAD673ECDB451D035F496F0C0D18CAFCE26468D8028E309A85A8645ECA734607EA4190DD9120A8AB1AC84EDEBAA329E823977F93B8C6B59223BBFB448DEA14DD625B9F3681CF64E6537E992DEBE23E7BFC4494C0CCD3AF8AEADFAD82E26BFCA82C34A11E9147C2DEB4659469D85857C6A7E97A7A889D4F086B9540B8D6FD5E46C81CE19C22E54DA030DE65C57DD4AE31736A2C9C7A8702069A28F05DB2E3FF99707933329D40CEA1246749FAE8416A596A985AC9BD1035F2A6B9824628DACBE81C4CAE589909DA56A4FFE6C48579BB10F70DBB7A1C9CDC81280CC8AC6326A6123F1771D1D5EE245B3252C6323714306BCFCDA500C265A21DDC55D392FDD7FA198EDE519445533F070F460CA23F2D35624AFF1A2FC9837C31E67010B498B84F4507526451300D1992EEB0F750F60E02D8DF6061AD57F75E8F134BA8C20490C374403084521C709242D83560503A028746874A8271E2C9FC719F26081C898030671A6CE6B620C11ABFD73F3EB2BC5A17E0324B7ECF590D22C9531D5F9745C0146F37B5D5571B971848462BAD61119B3038F2FF555A14AB596C53E32B770AB468D6E28BFDB90C895AA2307EB25350DFA03ADB91B0EBE45119CE8FFAFDA427BA1666C7656A9951D5E4FE4FD67569A2E6FA8DF2FF93D1F6DF19ED695A9143EDB23C60DF893847D0EEF02F5DDC1D6B035426D50CE3777D9D618668CA6BF1ED6B3BD9300BA4DBF0DF01BB5B6772E1A8A0D115340A3444BBB261E18DE21D3B729028D89060D9323EB9CF3EE21376E692E3F5190EC1E84AC90A116310D0BF2DCFDBFDB93D286350F6DF05D66A79E5661BBCDF79074DBA967B80B14D7B8033417CC7646C23154669C1007455D571C6E8F00192E1E54D626C11013A7099661A11605C693CB5CCE693FFE894C6EBC228F18F8F2E590903C0EBB9
BD7508C91BEB64A6FF6F7CB10A765C98272118A79DB38960426FDDAFDD563841C0FB0D7E47D6AB791E08598352D170AD49936C16A5352C82F289FEF2878F1DEB0784DBE76C16F3152CE00C4BCB4E025EA0C134D4B592B6830EEF704BA627D0F5B13B487B5BCE13AE85895E7448094D197B035C9879D7823450BD659CF2133CF7E8F77C42BB9039B4D4CB471FE42AFD444F78C615BBD7BDCE30D3BC7F4ADBAF5153E71D859198B0044F00916B61C6802E8253AE7E850E50776DC45DEACC0C4AF630824D0BC4F61F5FDEE94030DBC4253F5F1CC47FBAF88D778048AB0D612503322ADE2C2FC661C24189BE053E23661CD33A00CA3ACE39EA0880EC59A22901F95E03340C960172E5A4E1C51725DDFBEF0848D57986F0CAB2564EAAEA3DC9DEA69E645CCD20F5638E8B16F7913FB3BD90892F41F12EAD995B8988EEBA73BA8B8BF4F0E2B0C810F87C99A08F1D5A4BE2636D79A65ECF66493887AD05B0D350D4976433BEC71C85FF12BCCCA557183E50907B5687D98F4095346CF733E9C7363FA977A0EF09AB0BA5406864060A36F5BA2352DCD1E645393A95E99F924BBE8BB6E864387D74648469601E1F3FB6BD049CFB0B07BD8B9EC479473FFA4A43F604BDC7BADC054EC4FD56FE7CB8044EF76090C13BE17CCAC7282EF4A4F4A4E44DB4E9583E4B81B41A329338A5C48366E1E50D1EE6855F82EC411744B7E0ACB53207D82606864D14C4AD178E87248F3238FF379DA2E01343B3E5FEE36F95AE1CFAF5A7FF43136861F99075184F2FD30110CC932AFB8E03526A693867B48690BAFB5ECE1DB831803ACC1438616ECF32F3BA17F9C6E34FC4E8812EF998918C96DF34B7EEF0DF5997173B3B6AFD15306465F2BCC01EAFDBFC034420ADE352031286B17B44CEA437D3929AC4710780D32068584BEECF43CBCEFF1B0C3248221E1981B639B81312CF81E3BB6EA3D8DE4BC4A8DFB7AB173675EE038640914D3B0251E5BB3D76C3EA16A60A2A92FF2EA702CE07FA7FD97A59928BDCFA41F3C8FEF447D2E6F81EDD6F6BFCE93831DEE22E6FA1091ADA2B5830562BCD821933984129795B3050752BFF771EF3FDD8366E986200C1C2A70492F89F6C13081A085E856C82D152C0DFDBA8C566DCC3671A56066D86B5BA59052EE4132BA81AE3BFA23F6CCDE6BBDFD3F1957B227753C6B587C43490F2F7E0CE5EFAE4CA6C177D92B6A3A318802007B59B4B23DB779C00C29088FEE7D4BEAE1E66C6AD7B63C71A12D6B3955A103B40638222248A6694F004A02A9970718F79F82D9162DEF769E0E9C2FD069D83EF5F278A57B56F2101DF28ADAAC31733D97B76986C6D4A79BC0561F1FDEDEBFFD938E2CFCF07670AD77BE7007C40D8593C99BB2CEA3C8A9A400F6F4066E0E539290B87FA7CDBDFD36C1DAF48D0DBC5B386E3178CAA9D9BFC71108853B594AA4F4E2DAD3CF3
249EB11231980D9E75CFFA309CD659DE91EF3CCAC46ACAE1DD858D8287761FCFDF86935E4321E34E227A193CC4E658FA323B1308C04DAD61B9AD8C9600A84CF7B374CBFCEEA75E5789954FE124C72127D443D77B339A243183FB0517D894E40304A01EEB3F0DE054CCBD2A06960FABB3A352E7A620F4564AF3E83F8C195CE0804582825E42E0C3A2904C3C9641DC9458BE3D5616AD73E6E25BCFC109F294818D194175054207A0CB090BEE42E4C34869D63800003DB34DDB2AAB8ECC5F7D49E34B01082391FD7F8109E824D588AF3811AFC65F1269EB1973EA9444927FE3AE2EB86E1AD402E469343F7641156A4D3DADF2167E33ADAA547CD5D2B12E43BDBD48196651AD43DEB9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Courier cguidfix
/F1.1/Courier renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 sc
q
0 0 591 23 rc
1 0 0 -1 410.71194 11.5 cm
/F1.1[ 14 0 0 -14 0 0]sf
-25.204102 5.5 m
(!"##$%)[ 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
3 w
1 J
1 j
0.60000002 i
/Cs2 SC
0.26274499 0.63529402 0.89411801 sc
1 0 0 -1 -3 29 cm
328.54266 17.413387 m
379.54266 17.586613 l
S
349.02435 22.381195 m
359.06094 12.618805 l
S
358.9924 22.449747 m
349.0929 12.550253 l
S
353.94571 24.5 m
354.13959 10.5 l
S
361.04266 17.5 m
347.04266 17.5 l
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 561.40125 11.5 cm
-29.404785 5.5 m
(&'\(\)*+,)[ 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
0.60000002 i
/Cs2 SC
0.88235301 0.56078398 0 sc
1 0 0 -1 -3 29 cm
475.73196 17 m
526.73193 17.423227 l
S
2 w
494.08856 9.8745193 m
508.26178 9.8745193 l
508.26178 24.047749 l
494.08856 24.047749 l
h
494.08856 9.8745193 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 251.02264 11.5 cm
-37.806152 5.5 m
(-\)./0\(0*%)[ 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
3 w
0.60000002 i
/Cs3 SC
0 0.619313 0.451406 sc
1 0 0 -1 -3 29 cm
159.85335 17 m
210.85335 17.423227 l
S
2 w
190.30756 11.950147 m
193.07506 14.717639 193.07506 19.204628 190.30756 21.97212 c
187.54007 24.739628 183.05307 24.739628 180.28558 21.97212 c
177.51807 19.204628 177.51807 14.717639 180.28558 11.950147 c
183.05307 9.1826391 187.54007 9.1826391 190.30756 11.950147 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 90.833336 11.5 cm
-29.404785 5.5 m
(12\)\(\)+,)[ 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
3 w
0.60000002 i
/Cs3 SC
0.58135444 0.0048924065 0.82820129 sc
1 0 0 -1 -3 29 cm
7.3293962 17 m
58.329395 17.423227 l
S
2 w
39.867531 23.047783 m
32.780914 8.8745537 l
25.694302 23.047783 l
h
39.867531 23.047783 m
S
ep
end
%%Trailer
%%EOF
