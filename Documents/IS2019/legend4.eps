%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 524.000000 38.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G2022) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 524 38
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 524 38
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Courier
%!FontType1-1.0: Courier 1.0000.1.0000
14 dict begin/FontName /Courier def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /R put
dup 34 /a put
dup 35 /d put
dup 36 /i put
dup 37 /C put
dup 38 /A put
dup 39 /l put
dup 40 /hyphen put
dup 41 /B put
dup 42 /P put
dup 43 /S put
dup 44 /K put
dup 45 /M put
dup 46 /e put
dup 47 /n put
dup 48 /s put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1341 1 index div -838 2 index div 2177 3 index div 2231 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C0000001E6670676D00000000000000BC00000173676C7966000000000000023000001DE46865616400000000000020140000003668686561000000000000204C00000024686D747800000000000020700000004C6C6F636100000000000020BC000000286D61787000000000000020E40000002070726570000000000000210400000096002A008D0077009D0097007700AE00000021FE710000039C001A04A200210000B800002C4BB800065058B101018E59B801FF85B800441DB9000600035F5E2DB800012C2020456944B001602DB800022CB800012A212DB800032C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800042C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800052C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800062C2020456944B001602020457D691844B001602DB800072CB800062A2DB800082C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800092C4B535845441B2121592D0000020066FE96046605A4000300070047B800082FB800052FB8000810B80000D0B800002FB8000510B900030005F4B8000010B900040005F4B8000310B80009DC00BB00040002000000042BBB00020002000600042B30311311211125211121660400FC73031BFCE5FE96070EF8F27206290000000001009A016D0433022F000F000D00BB00070003000000042B30311322263D013436332132161D01140623C514171714033D171A1E13016D19166A131616136A121D00000002FFFE000004D704A2000200300158B800312FB8001A2FB8003110B8002CD0B8002C2FB80025DC411B0036002500460025005600250066002500760025008600250096002500A6002500B6002500C6002500D6002500E6002500F60025000D5D41050005002500150025000271BA0000002C00251112394105000A001A001A001A000271411B0039001A0049001A0059001A0069001A0079001A0089001A0099001A00A9001A00B9001A00C9001A00D9001A00E9001A00F9001A000D5DB8001A10B80013DCBA0001001A0013111239BA0002002C0013111239BA0003002C0025111239BA001E001A0013111239BA0021002C0025111239B80032DC00B800004558B8000A2F1BB9000A000D3E59B800004558B800162F1B

1635140623222726272E01232202151412333236373E01333216151406070E0123220011100033321603A20A2422251E04202942140704139061B1D6D9B23A783A1B5E141F2B2F4054AA5EF7FEBE0146F7428904811B16243862A90B2F215E1C0F4B5FFEFDDADAFEFD21210E43291E1E37283734015D0110010D016420000000000100480000049304A200480149BB00000006000B00042BBA002E002700032BB8000010B900100004F4B900040006F4B8000B10B80015D0B8000410B8001CD0B8000010B80020D0BA0021001000041112394105000A0027001A0027000271411B0039002700490027005900270069002700790027008900270099002700A9002700B9002700C9002700D9002700E9002700F90027000D5DBA00220027002E111239BA0033000B002E111239B8002E10B8004ADC00B800004558B800182F1BB90018000D3E59B800004558B8002A2F1BB9002A000D3E59B800004558B800072F1BB9000700073E59B800004558B8003D2F1BB9003D00073E59B8000710B900000001F4B8000ED0B8000FD0B80010D0B8001810B900110001F4B8001FD0B80020D0BA002100070018111239B80022D0B80023D0B80024D0B80031D0B80032D0BA003300070018111239B8001010B80036D0B80037D0303125333216151406232122263534363B0211232226353436332132161514062B0111012B012226353436332132161514062B01011E01133332161514062B01222627262F012E012707019A433B302A3BFEAA2223272F2040404C2A232201563B2A364B2D01A10C16312C2226012722242F3C0EFE7D57A2AB123E2A232260201D0F0966273F7E476E8D202528202523252003851F29232520282820FE6901972226272125232721FE8A12BCFEBF1E2723250E190EBD4975750A680001000C000004C104A2004100FBB800422FB800182FB8004210B80037D0B800372FB80035D0B800352FB8001810B9000B0006F4B8000DD0B8000D2FBA00000035000D111239BA001D0018000B111239B8003710B9002A0006F4BA00250037002A111239B8000B10B80043DC00B800004558B800042F1BB90004000D3E59B800004558B8003D2F1BB9003D000D3E59B800004558B800142F1BB9001400073E59B800004558B8002D2F1BB9002D00073E59BA000000140004111239B8000410B9000B0001F4B8001410B9000D0001F4B8001BD0B8001CD0BA001D00140004111239BA002500140004111239B80026D0B80027D0B80034D0B80035D0B8000B10B80036D0B80037D0303101133E013B0132161514062B0113333216151406232122263534363B010B010E01232226270B01333216151406232122263534363B01132322263534363B013216170268D70E312EA420212937101C17412C2422FEE73A2A32472B15C60F2C2C2A2C0EC912433B



FCF828282A2A0131C3292B282801251B1F04BC6C382F58562926FC0D2124291F242423220281252323231613000100BA0000043D051D001B004ABA000C001700032BB8000C10B900000004F4B8000C10B80004DC00B800004558B800132F1BB9001300073E59BB00080001000000042BB8001310B9000C0001F4B8001AD0B8001BD03031012322263534363321321615112132161514062321222635343633210223AA61312927014A1B1E013A2623222FFD1E27292A2A0115048D1F2924241613FB992124291F2424232200000100680000047F03B4003B013BBB002C0006003800042BBB00150006002000042BB8002C10B900000004F4B8003810B80005D0B800052FB8002C10B8000DD0B8000010B900300006F4BA000E00000030111239B8001510B900240004F4B900190006F4B8001510B8003DDC00B800004558B800082F1BB90008000B3E59B800004558B8000A2F1BB9000A000B3E59B800004558B800112F1BB90011000B3E59B800004558B8001C2F1BB9001C00073E59B800004558B800332F1BB9003300073E59B800004558B800352F1BB9003500073E59B900000001F4B8000A10B900280002F4410500E9002800F9002800025D41170038002800480028005800280068002800780028008800280098002800A8002800B8002800C8002800D80028000B5DBA000E000A0028111239B8000010B80015D0B80016D0B80023D0B80024D0B8002CD0B8002DD0303137112322263534363B0232161D013E0133321615113332161514062B0122263534363B0111342623220615113332161514062B02222635343633F21344332A2F2F601B1E498F4D97AD2F322C2F3CDD40242A3A236A65669C233C2A2446B63629292F448D0281202825211613444441BCA6FE3B212427211E2A271E01A0757B8A66FE601E272A1E2325281D000100B2FFE9041703B400400235B800412FB8000E2FB8004110B80015D0B800152FB80000D0B800002FB8001510B9002F0004F441170036002F0046002F0056002F0066002F0076002F0086002F0096002F00A6002F00B6002F00C6002F00D6002F000B5D410500E5002F00F5002F00025DB80008D0B800082F410500EA000E00FA000E00025D41170039000E0049000E0059000E0069000E0079000E0089000E0099000E00A9000E00B9000E00C9000E00D9000E000B5DB8000E10B900350006F4B80042DC00B800004558B800182F1BB90018000B3E59B800004558B8001E2F1BB9001E000B3E59B800004558B800382F1BB9003800073E59B800004558B8003E2F1BB9003E00073E59BB00320003001100042BB8003E10B80004DC411B0037000400470004005700040067000400770004008700040097000400A7000400B7000400C7000400D7000400E7000400F70004000D5D41050006000400160004


00>] def
/CharStrings 19 dict dup begin
/.notdef 0 def
/hyphen 1 def
/A 2 def
/B 3 def
/C 4 def
/K 5 def
/M 6 def
/P 7 def
/R 8 def
/S 9 def
/a 10 def
/d 11 def
/e 12 def
/i 13 def
/l 14 def
/n 15 def
/s 16 def
/Omegagreek 17 def
/Omegagreek.mono 18 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1341 -838 2177 2231}def
/UniqueID 4459673 def
currentdict currentfile eexec


C634C238B35C080A93D3413EB56F9546E4B742B5BC41D037A4FA8F38B401D4E029B0E84A41CB7CB80CB92D7BA797C3A49A2175EB2CEBD0A4B3F5FF090D743D96522DABA18462488F24AC231D0CEE1994C672942B3D0F550062C73CAFAD533552D02F941142523809EC212FF5E7B824923F5AE8CC2A2280E8CB1E14E9D8D5792A7603A6FE8CDD0CE9AEA45A7E46583D4CAA2B80FFF041751C36905916D517239EC4126DE0ED5E830D3F68117F9B601AAE77EA078108A02E4B6A7ACAA6E81DF4333437EE064A223E1D570F8661E0301C967E390DF8085555543AEB6325CCA9CF40FC254FB50C267944D524CDE764C566BBE07416AB42A31F412E7C9999B0B42BC00945AF1F8C8D4DD4CB3FC9382A6EAB122243170BFA3269101A27D73E8EBDC07D81DAA867910819485BB7EE625D6F0B9E0214BC9583BF6E668BA80B3C4287F5FD5EE212B39AB4FAC36CFF80F91F089A3B2BFC570C7829F19C525ACC9A96172AA6FFE7EA9E6F6D62C1FBDE2D8D28AC2EC8CD57D03BA2553D2D05F746CEB1095F4B57CF8F08B0DCC5B6D412BA875711DDF473116DF73E1269F669216A8146372F0BB475225E1833C1D8F09290F23C914963BF7F1F4D007B9B98A0395BF8D53D786CF21203DA0AED30AB6C612632AC465F0C5C98AFC7DF7416E980CE544344F81EFF0E966BD4161EF63A0B3FB59C47556336D67F30C1F01891BD52D29054954722250BC14C69812FA5D6D0EF18991AB397139670DDBD1A20E3D401B3B47814CF33D356DEA536935478E70CDF33CD6CFF07F7564AE3A5154C5C555DC5D5F8DD3583C7C61C869040360013BE3D08B1DAC5C80C49601603FE3AF0099F31CFF60F2674D25CE13FC5AA23BA02A211AC8FA39811D4DF9450229665B14EBB601AA30625F928CBC346360C0DE8BA58F541C63F29E61BCBE7C2193765D042684F0A07177236223532ED89588141F3643F39CA06E2DEE37489BE86200BD9EEA09A5C2DDEC1872F485DAA8630616C8B25DDE87F1C966E8813B9A676EF397669417D7ADBAEDA7760F18A387E806FA30DC5A68AFD170C809870B3EBACE92B15B287C38DC0110CE3FFCD09CDE07EBFAC00D0404884431C1747FBE7116D6C771EE73E0E8CC1121DA23353889117C6B7B7BEC7471BFEC6E4B021D03426B1AB3703F768FA12035F5C0A085B529CE69BE8CEC8D8477B0843B671CD59C9BD569C00CAFBF21B14BEE953ACA18990CADAA30204A36B487D4DFC717994FA7FCF34B6634175CD49F97BDAC73E0A97BC98B3B1EEFC6532D1BA337414FA6BB0FC8CED21DD3469575AF58F5EABF63D8EA36E6EC72A60F486875C40CDD16105C42F8ECA727DC3C409BA7DA8CD88F83B55D2EC2F2EF7B665D460A79D39F0BAD8C03FD3B8A0A5A356D68D784BB743E85B1026E10F79E1D7A0614EBA58ED9B4806FAE49D551E4DC4D2DE8AE6C8DEEBF450
0F3228D92EE673882AB3B0834759D10888C668804F121054DBBE7EFCD1ADE87E3A4AAC96472378BC7319A1EDAB927B2057246E1B5CE36D1B66FED3E5AD108BCBACD1F1881932B53A14F61634136E1124277FCBF7AFB011A10BED6759D37E9ED3B7FC76D0FA3871335EC33603D21DFA22B46AB471F323D09A10AD0ADAC7C5C6596BB71948EA501C403FFC2BA077B230DDFF22AFDE527BDF2E888415825A16919CEE0F5367105948D3D6B327FD0EEFDD8C77C8B6B1D2876A83182781DB82AAEEB381ED00CF21606E7D38C12596C5E424673C9D9D237469C5893D47D3D82BD7531376B7ED78CBF59CE994822403DFF9D7E481D6882CA53C4D7DDA808E2AB52EC5E40D5B5E729523485DAE09709DCB19DE59EDDFE663743750066D567349C627215960F9A067AEF5B5361B08BA067068BD74DE2C40A3260FD79C60E7EB3C9876029E3DB325C40515A3706E874E8E640B4D2DC3FEAC4841B7869618F4D2C2CA144193DEC08B18352D97B45BCA5B84331EEAAC3315317788C197771295AEBF618A6DB2CC28E89526954E13480EDE4FCF631655BD9737493FD2D20C315AD8070FD3EFD32118080B2818B5FC768A409B8E5616E834305BF57C543C56B9AAE1191D3E29F060D3427E510E6A631FC77C15B4C4BEA974DE2A799723510A1BE3F8644D5E70B7535CF7DE606225968EE3B8CB8B8C1386CE2B508FF9D5176953B78917C0E98643D4CEE3A2D2EC1095C8F039FC7A6A4AF2CCB1BF9997EEAD3523C0A7550FF8F5B1B0E2A9AC1073AFF7E6E0FDCC7B2E85741E0A534B7EA4447B14BA50E5D47AFDB4C8459AF02C65C237880C7339E8DDA7E821674EBA3BFE88A4FBBB77B2B2ED2BF176A5F1B9C2AD001FEB448105BB5A575FB7804005CD057833A68365297C513684F3217D3C4C0644DBBE5F945A1670DAE06D7980BF00E69EAEC19FBE9EFBF25881C2139AA51B73A43E261C39C4E6F18ABF1BFC22CA5FE15D1E0619FEF4B197DF5D6AFCE5000D49E79FAB42D9E660C675CFC4189C67482221E235887E20F487540C0097C29100205119BFED0F8BFA802EC3FB6D47793C71191CB0ACB826BB4348786F7403B7E1972014833B277DBC267CA00D8F7818544DC154FF0496BFB5A069319FCC212E35BB02A2912984AEDF00999EE7C718C91ED3A9DEBE162EAEE8811DBDDF282329B691058D89354615AF6909703756CDD69281F9F8D8965D834A898E37E4A7EA779543D4FE4749FED83071C60B009DAB3259C17BC1B1067930B0AD50A51E7C391175D9A55870472F66601B676403BE53877689601BF9A50E2227403FB348F09EF37CEFC0A3E1D3B4A240A2E424C0F74C20657B664330167C0985D98637BBDAC2A7A5E1693221088481778A1AAC6236A41F87EB57F8D7A200A25906129E6EF83B02A30C0770FE17E35A0FB427DFC4317759458DF23690727CFAF6A583A5
2A3D07B9BEBB69EFC8FAA50F54922555B69FACCE4570C3220B92FC44A991DBE247B07B7CCE2E9B3F09095979D53BD73D6998B1CB934994D2EAF0163C776856FAB549C7C58800ED959C1CE84C98C32A09BCD3E0F41F6CB3CC7984A0424419543A2735D120CD8BC28FEB2A24D79B60B13FEFEECB03ED19117639B81523B412EDDC8FEE1702D7DC1E5B04B62BE227E1729D904D0BF133FE50C74EE44F01093EA9A67DED85AC2B7C6B14FCE9651836306C47FC7E24E14D36A63FDFE6C37FF09F5C48E49927A40453B3E84E156224895AC2C179A9CCFA824F6692704B75EB6F9D3C3830111306D204934F771624A2387A175559A4D04FDA5A7539CCC2D708A88A0959BFE19FB0D785351890FF6AE5003BC812916CD58C5CB466B2D8E6F1A155E1D63955EB2C3C5E25FFC5C73C308C821DCE3A6401B46BDFC883717EDEB7CC8228F7A0F6235FABCCA815F1F0995CD76F573F97DC3A293F26A6F10152E1E9922B776CA3C94412EE9DAEE539D62F5AC172A5D14A12FE50BA820DE18217B35F7DE9A1080141ABFC79449226BF351C51EAA94BF2759336600D609E82BF585BAE03583516D171C06DA482CAF78D44CD126A63B8B77D33A36E52E93BF0C55523C233417E2EB347FCB59BEB24D565E9E89FC56C7BAA234C82D29842EDECF409C256F5F8599499A8A0375E1B23C536727CE87C0D7FC52832CAD402E9254952C2A74EEF1AE48B53BECB66B8BD75497AA7006CBE9BF9D8AEF526A6EDA9355567EA03DDAF6E77E8C5FE68B9D1E5271D177CAB9D5D09AE95378F0C68391DA2596F85B7A5512EA65C9C403A05B86DF6933B764E868E36E45CAC4FBA5206E76744EE31737AEE918E9E40119CC26C4813E5F75D3A0579703A3E49F575E23232D895A8B27FE029A6856BB64A3AB8582134BD921E75DE6CCC5AD05309B5C75972E7073F564E18A94B91EA7AC5EE6AF5DE3223C03D62518F8782FD51C9CC390146335688E66269771ED379EA94951FF3115BBB8857521BF045259B6818447565E8ECAB276E8120A4AE2E31880EC52B36078E3CBD7DF534D8784CA482951F5082EC5E2C82241DBAA8125CB023DE3972A11623ACFDE0D68FE032B0C764372F409311A233B27165E75D7C44D32F836E7BB8CD005D0B0B0EA4351AB08844AF19E51F1C4637F04B18DD7D17DB9ACD0FDEAD5DEC74622468921F1B047BFC55F94CDAE1CD7BEC68EC940B4F5A89F55DF0DC450194B9084BBC64EDFCC5153A41D5ECD31E7C64A77356FC83DF2B16AB4EDEE51D66571E453224DD71EAC1099C652F7832D60CDDDAE093D9D092E8104E268E57F01BB69F84439626A517BA32A8E453625BA69B45F0E083DE961EDBC736FB2D45A9C1648CF995BE7F570BEBD74C958600637458C6C1A6F6271BFA829D2447D8799AADD945D312F6BEECAC90DB5661DFEADE4AE28FE86742008C6DD559D5BA
BCD7B89373A9210C02D11BC6FEF6F0538BB0354E40
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Courier cguidfix
/F1.1/Courier renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 0 524 38 rc
5 34 m
515.23621 34 l
515.23621 5.6535435 l
5 5.6535435 l
h
5 34 m
f
1 J
1 j
0 0 0 sc
1 0 0 -1 5 34 cm
91.5 8.5 m
153.5 8.5 l
153.5 22.5 l
91.5 22.5 l
h
91.5 8.6885242 m
S
0.5 w
0 0.61960787 0.4509804 sc
91.731537 10.200946 m
103.75792 22.227329 l
103.66953 22.315723 l
91.643143 10.289339 l
h
91.731537 10.200946 m
S
101.39027 8.5039368 m
115.42105 22.534718 l
115.33266 22.623112 l
101.30187 8.5923309 l
h
101.39027 8.5039368 m
S
0 0.58039218 0.42352942 sc
113.0534 8.6639175 m
127.08418 22.694698 l
126.99578 22.783091 l
112.965 8.7523117 l
h
113.0534 8.6639175 m
S
124.71653 8.7308464 m
138.74731 22.761627 l
138.65892 22.850021 l
124.62814 8.8192406 l
h
124.71653 8.7308464 m
S
136.37965 8.6639175 m
150.41043 22.694698 l
150.32204 22.783091 l
136.29126 8.7523117 l
h
136.37965 8.6639175 m
S
0 0.61960787 0.4509804 sc
153.05379 10.823637 m
141.02739 22.850021 l
140.939 22.761627 l
152.96539 10.735243 l
h
153.05379 10.823637 m
S
143.3504 8.8192406 m
129.31963 22.850021 l
129.23123 22.761627 l
143.26201 8.7308464 l
h
143.3504 8.8192406 m
S
108.2271 8.5923309 m
94.19632 22.623112 l
94.107925 22.534718 l
108.13871 8.5039368 l
h
108.2271 8.5923309 m
S
119.93487 8.8192406 m
105.90409 22.850021 l
105.8157 22.761627 l
119.84647 8.7308464 l
h
119.93487 8.8192406 m
S
131.64264 8.9688473 m
117.61186 22.999626 l
117.52347 22.911234 l
131.55424 8.8804531 l
h
131.64264 8.9688473 m
S
148.04279 8.8804531 m
153.05379 13.891446 l
152.96539 13.97984 l
147.95439 8.9688473 l
h
148.04279 8.8804531 m
S
0 0.6156863 0.44705883 sc
96.519333 8.9688473 m
91.508339 13.97984 l
91.419945 13.891446 l
96.430939 8.8804531 l
h
96.519333 8.9688473 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 49.629631 18.248219 cm
/F1.1[ 12 0 0 -12 0 0]sf
-39.606445 4 m
(!"#$%&'\(\)*+)[ 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 0.000000 ] xS
1 0 0 -1 237.27676 18.248219 cm
-25.204102 4 m
(,\(-."/0)[ 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 0.000000 ] xS
0.60000002 i
/Cs1 SC
1 1 1 sc
CM
269.86337 25.311476 m
331.65866 25.311476 l
331.65866 11.311476 l
269.86337 11.311476 l
h
269.86337 25.311476 m
f
1 w
0 0 0 sc
1 0 0 -1 5 34 cm
265.5 8.5 m
326.5 8.5 l
326.5 22.5 l
265.5 22.5 l
h
265.5 8.6885242 m
S
1 1 1 sc
CM
270.17496 23.799055 m
282.20135 11.772671 l
282.11295 11.684278 l
270.08658 23.710661 l
h
270.17496 23.799055 m
f
0.5 w
1 0 0 sc
1 0 0 -1 5 34 cm
265.17496 10.200946 m
277.20135 22.227329 l
277.11295 22.315723 l
265.08658 10.289339 l
h
265.17496 10.200946 m
S
1 1 1 sc
CM
279.83371 25.496063 m
293.86447 11.465283 l
293.77609 11.376889 l
279.7453 25.407669 l
h
279.83371 25.496063 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
274.83371 8.5039368 m
288.86447 22.534718 l
288.77609 22.623112 l
274.7453 8.5923309 l
h
274.83371 8.5039368 m
S
1 1 1 sc
CM
291.49683 25.336082 m
305.52762 11.305303 l
305.43921 11.216908 l
291.40842 25.247688 l
h
291.49683 25.336082 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
286.49683 8.6639175 m
300.52762 22.694698 l
300.43921 22.783091 l
286.40842 8.7523117 l
h
286.49683 8.6639175 m
S
1 1 1 sc
CM
303.15994 25.269154 m
317.19073 11.238374 l
317.10233 11.14998 l
303.07156 25.180759 l
h
303.15994 25.269154 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
298.15994 8.7308464 m
312.19073 22.761627 l
312.10233 22.850021 l
298.07156 8.8192406 l
h
298.15994 8.7308464 m
S
1 1 1 sc
CM
314.82309 25.336082 m
328.85385 11.305303 l
328.76547 11.216908 l
314.73468 25.247688 l
h
314.82309 25.336082 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
309.82309 8.6639175 m
323.85385 22.694698 l
323.76547 22.783091 l
309.73468 8.7523117 l
h
309.82309 8.6639175 m
S
1 1 1 sc
CM
331.49719 23.176363 m
319.47083 11.14998 l
319.38242 11.238374 l
331.40881 23.264757 l
h
331.49719 23.176363 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
326.49719 10.823637 m
314.47083 22.850021 l
314.38242 22.761627 l
326.40881 10.735243 l
h
326.49719 10.823637 m
S
1 1 1 sc
CM
321.79382 25.180759 m
307.76306 11.14998 l
307.67465 11.238374 l
321.70544 25.269154 l
h
321.79382 25.180759 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
316.79382 8.8192406 m
302.76306 22.850021 l
302.67465 22.761627 l
316.70544 8.7308464 l
h
316.79382 8.8192406 m
S
1 1 1 sc
CM
286.29553 25.407669 m
272.26474 11.376889 l
272.17636 11.465283 l
286.20712 25.496063 l
h
286.29553 25.407669 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
281.29553 8.5923309 m
267.26474 22.623112 l
267.17636 22.534718 l
281.20712 8.5039368 l
h
281.29553 8.5923309 m
S
1 1 1 sc
CM
297.7533 25.180759 m
283.7225 11.14998 l
283.63412 11.238374 l
297.66492 25.269154 l
h
297.7533 25.180759 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
292.7533 8.8192406 m
278.7225 22.850021 l
278.63412 22.761627 l
292.66492 8.7308464 l
h
292.7533 8.8192406 m
S
1 1 1 sc
CM
309.71106 25.031153 m
295.6803 11.000373 l
295.59189 11.088767 l
309.62268 25.119547 l
h
309.71106 25.031153 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
304.71106 8.9688473 m
290.6803 22.999626 l
290.59189 22.911234 l
304.62268 8.8804531 l
h
304.71106 8.9688473 m
S
1 1 1 sc
CM
326.48621 25.119547 m
331.49719 20.108555 l
331.40881 20.020161 l
326.39783 25.031153 l
h
326.48621 25.119547 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
321.48621 8.8804531 m
326.49719 13.891446 l
326.40881 13.97984 l
321.39783 8.9688473 l
h
321.48621 8.8804531 m
S
1 1 1 sc
CM
274.96277 25.031153 m
269.95175 20.020161 l
269.86337 20.108555 l
274.87436 25.119547 l
h
274.96277 25.031153 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
269.96277 8.9688473 m
264.95175 13.97984 l
264.86337 13.891446 l
269.87436 8.8804531 l
h
269.96277 8.9688473 m
S
1 1 1 sc
CM
327.53571 25.180759 m
313.50491 11.14998 l
313.41653 11.238374 l
327.4473 25.269154 l
h
327.53571 25.180759 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
322.53571 8.8192406 m
308.50491 22.850021 l
308.41653 22.761627 l
322.4473 8.7308464 l
h
322.53571 8.8192406 m
S
1 1 1 sc
CM
315.30524 25.05356 m
301.27448 11.022781 l
301.18607 11.111176 l
315.21686 25.141954 l
h
315.30524 25.05356 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
310.30524 8.9464388 m
296.27448 22.977219 l
296.18607 22.888824 l
310.21686 8.8580446 l
h
310.30524 8.9464388 m
S
1 1 1 sc
CM
304.23218 25.407669 m
290.20142 11.376889 l
290.11301 11.465283 l
304.1438 25.496063 l
h
304.23218 25.407669 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
299.23218 8.5923309 m
285.20142 22.623112 l
285.11301 22.534718 l
299.1438 8.5039368 l
h
299.23218 8.5923309 m
S
1 1 1 sc
CM
291.31827 25.031153 m
277.28748 11.000373 l
277.1991 11.088767 l
291.22986 25.119547 l
h
291.31827 25.031153 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
286.31827 8.9688473 m
272.28748 22.999626 l
272.1991 22.911234 l
286.22986 8.8804531 l
h
286.31827 8.9688473 m
S
1 1 1 sc
CM
280.02951 24.658768 m
270.00754 14.636783 l
269.91913 14.725177 l
279.9411 24.747162 l
h
280.02951 24.658768 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
275.02951 9.3412313 m
265.00754 19.363218 l
264.91913 19.274824 l
274.9411 9.2528381 l
h
275.02951 9.3412313 m
S
1 1 1 sc
CM
308.99152 25.119547 m
323.02231 11.088767 l
322.9339 11.000373 l
308.90314 25.031153 l
h
308.99152 25.119547 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
303.99152 8.8804531 m
318.02231 22.911234 l
317.9339 22.999626 l
303.90314 8.9688473 l
h
303.99152 8.8804531 m
S
1 1 1 sc
CM
297.34171 25.496063 m
311.37247 11.465283 l
311.28409 11.376889 l
297.2533 25.407669 l
h
297.34171 25.496063 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
292.34171 8.5039368 m
306.37247 22.534718 l
306.28409 22.623112 l
292.2533 8.5923309 l
h
292.34171 8.5039368 m
S
1 1 1 sc
CM
285.46671 25.371063 m
299.49747 11.340283 l
299.40909 11.251889 l
285.3783 25.282669 l
h
285.46671 25.371063 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
280.46671 8.6289368 m
294.49747 22.659718 l
294.40909 22.748112 l
280.3783 8.7173309 l
h
280.46671 8.6289368 m
S
1 1 1 sc
CM
274.21255 25.394154 m
288.24335 11.363374 l
288.15494 11.27498 l
274.12418 25.305759 l
h
274.21255 25.394154 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
269.21255 8.6058464 m
283.24335 22.636627 l
283.15494 22.725021 l
269.12418 8.6942406 l
h
269.21255 8.6058464 m
S
1 1 1 sc
CM
270.13254 18.619524 m
277.14792 11.604135 l
277.05951 11.51574 l
270.04413 18.53113 l
h
270.13254 18.619524 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
265.13254 15.380476 m
272.14792 22.395866 l
272.05951 22.484261 l
265.04413 15.46887 l
h
265.13254 15.380476 m
S
1 1 1 sc
CM
320.6749 25.146942 m
331.49866 14.323197 l
331.41025 14.234803 l
320.58652 25.058548 l
h
320.6749 25.146942 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
315.6749 8.8530579 m
326.49866 19.676802 l
326.41025 19.765196 l
315.58652 8.9414511 l
h
315.6749 8.8530579 m
S
1 1 1 sc
CM
331.49829 17.655031 m
325.48511 11.641839 l
325.39673 11.730233 l
331.40991 17.743425 l
h
331.49829 17.655031 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
326.49829 16.344969 m
320.48511 22.35816 l
320.39673 22.269766 l
326.40991 16.256575 l
h
326.49829 16.344969 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 414.22018 19.913385 cm
-28.804688 4 m
(\)"0.'$/.)[ 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 0.000000 ] xS
0.60000002 i
/Cs1 SC
0.64705884 0.64705884 0.64705884 sc
CM
450.30679 26.259258 m
512.10205 26.259258 l
512.10205 12.259259 l
450.30679 12.259259 l
h
450.30679 26.259258 m
f
1 w
0 0 0 sc
1 0 0 -1 5 34 cm
445.5 7.5 m
507.5 7.5 l
507.5 21.5 l
445.5 21.5 l
h
445.5 7.7407408 m
S
ep
end
%%Trailer
%%EOF
