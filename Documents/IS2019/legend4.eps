%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 524.000000 38.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G3020) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 524 38
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 524 38
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Courier
%!FontType1-1.0: Courier 1.0000.1.0000
14 dict begin/FontName /Courier def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /R put
dup 34 /a put
dup 35 /d put
dup 36 /i put
dup 37 /C put
dup 38 /A put
dup 39 /L put
dup 40 /hyphen put
dup 41 /B put
dup 42 /P put
dup 43 /S put
dup 44 /K put
dup 45 /M put
dup 46 /e put
dup 47 /n put
dup 48 /s put
dup 49 /l put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1341 1 index div -838 2 index div 2177 3 index div 2231 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C0000001E6670676D00000000000000BC00000173676C7966000000000000023000001EEC68656164000000000000211C0000003668686561000000000000215400000024686D74780000000000002178000000506C6F636100000000000021C80000002A6D61787000000000000021F40000002070726570000000000000221400000096002A008D0077009D0097007700AE00000021FE710000039C001A04A200210000B800002C4BB800065058B101018E59B801FF85B800441DB9000600035F5E2DB800012C2020456944B001602DB800022CB800012A212DB800032C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800042C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800052C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800062C2020456944B001602020457D691844B001602DB800072CB800062A2DB800082C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800092C4B535845441B2121592D0000020066FE96046605A4000300070047B800082FB800052FB8000810B80000D0B800002FB8000510B900030005F4B8000010B900040005F4B8000310B80009DC00BB00040002000000042BBB00020002000600042B30311311211125211121660400FC73031BFCE5FE96070EF8F27206290000000001009A016D0433022F000F000D00BB00070003000000042B30311322263D013436332132161D01140623C514171714033D171A1E13016D19166A131616136A121D00000002FFFE000004D704A2000200300158B800312FB8001A2FB8003110B8002CD0B8002C2FB80025DC411B0036002500460025005600250066002500760025008600250096002500A6002500B6002500C6002500D6002500E6002500F60025000D5D41050005002500150025000271BA0000002C00251112394105000A001A001A001A000271411B0039001A0049001A0059001A0069001A0079001A0089001A0099001A00A9001A00B9001A00C9001A00D9001A00E9001A00F9001A000D5DB8001A10B80013DCBA0001001A0013111239BA0002002C0013111239BA0003002C0025111239BA001E001A0013111239BA0021002C0025111239B80032DC00B800004558B8000A2F1BB9000A000D3E59B800004558B800162F1B

1635140623222726272E01232202151412333236373E01333216151406070E0123220011100033321603A20A2422251E04202942140704139061B1D6D9B23A783A1B5E141F2B2F4054AA5EF7FEBE0146F7428904811B16243862A90B2F215E1C0F4B5FFEFDDADAFEFD21210E43291E1E37283734015D0110010D016420000000000100480000049304A200480149BB00000006000B00042BBA002E002700032BB8000010B900100004F4B900040006F4B8000B10B80015D0B8000410B8001CD0B8000010B80020D0BA0021001000041112394105000A0027001A0027000271411B0039002700490027005900270069002700790027008900270099002700A9002700B9002700C9002700D9002700E9002700F90027000D5DBA00220027002E111239BA0033000B002E111239B8002E10B8004ADC00B800004558B800182F1BB90018000D3E59B800004558B8002A2F1BB9002A000D3E59B800004558B800072F1BB9000700073E59B800004558B8003D2F1BB9003D00073E59B8000710B900000001F4B8000ED0B8000FD0B80010D0B8001810B900110001F4B8001FD0B80020D0BA002100070018111239B80022D0B80023D0B80024D0B80031D0B80032D0BA003300070018111239B8001010B80036D0B80037D0303125333216151406232122263534363B0211232226353436332132161514062B0111012B012226353436332132161514062B01011E01133332161514062B01222627262F012E012707019A433B302A3BFEAA2223272F2040404C2A232201563B2A364B2D01A10C16312C2226012722242F3C0EFE7D57A2AB123E2A232260201D0F0966273F7E476E8D202528202523252003851F29232520282820FE6901972226272125232721FE8A12BCFEBF1E2723250E190EBD4975750A68000100390000046F04A200280093B800292FB800002FB900070004F4B8002910B80014D0B800142FB900270004F4B8000710B8002ADC00B800004558B8001C2F1BB9001C000D3E59B800004558B8001E2F1BB9001E000D3E59B800004558B8000B2F1BB9000B00073E59B800004558B8000D2F1BB9000D00073E59B900130001F4B8001C10B900150001F4B80025D0B80026D0B8001310B80027D0B80028D030310134363332161D0111140623212322263534363B01112322263534363B01213332161514062B01112103DF1E2A24242622FC892F24242B4C7D7D4A2D25272B01C32F24262D4CA8021401934B2C25272BFEB723272424281D03851F2925232424291FFC7B0000000001000C000004C104A2004100FBB800422FB800182FB8004210B80037D0B800372FB80035D0B800352FB8001810B9000B0006F4B8000DD0B8000D2FBA00000035000D111239BA001D0018000B111239B8003710B9002A0006F4BA00250037002A111239B8000B10






00>] def
/CharStrings 20 dict dup begin
/.notdef 0 def
/hyphen 1 def
/A 2 def
/B 3 def
/C 4 def
/K 5 def
/L 6 def
/M 7 def
/P 8 def
/R 9 def
/S 10 def
/a 11 def
/d 12 def
/e 13 def
/i 14 def
/l 15 def
/n 16 def
/s 17 def
/Omegagreek 18 def
/Omegagreek.mono 19 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1341 -838 2177 2231}def
/UniqueID 4459673 def
currentdict currentfile eexec

C15BB28ED678177BE5DCC09440E58CA63736631979C7E29D2E53C938DE2A61A4586E60F9187E91688B030F619F47B47634561ED5A00262F62EA742BA8685085F537D6AC5A36375733CD51FFC5FA0D8C5656D7ED8160DC0BFE610FEF55ED173ABC73C6947791E635D6CE038B5C5BD41C1765F121AD016E71E247BD348397278FDDB97D2C48CE04362682AE0D93B3F8F265830502662F2ECE8588826E301162873FB2864461E1FA378C585550616959FFC04C95826F6A978EA30CE957FDBEC3D1F90853FDAA361A658D3E14CB390AE2579FBA97AE90B80B5BC5DC41CB300697ADF61BF8103975EDCF6FB7C34F89BB1D78B8A58C90E2242422D0F077846D1B09EC4D994EB974E1B9FA708DC7109549D9D94429F78046F0E8F1AA36CBA100076EA6F9BDB197D855C259E2786BB25CF885F7885F5872EEF15C53119B3373EA7F42ABC05AB72B2684ACD04C7D22BEBC977E754FA685DAFE9B8802C49B68B8A36AE8ACF13282E01E77A0F2F4C3B371AE53A883480D0F20951590E9C3AEDB60FE3130185D4B0C6D34A8DA89F2F3A351BFCF9660EF15B00659BEAE3CE008972036588F1F7DB6E07C58CCA8B80D141D81F5A0933C731C2A9D5F54834A306C6A2DB3E27164EF83103175CD1DA32DFDD7E13D73F4FECF10524194D09E7EDD45ABF0DBE9BF51C24F1A40375EBA4A56395C75CECFE3DB2661CD2169A20839F0AE917B9A2156DBC40DF05AF0CEE40C178BF8E4F19069ADFC9627A691FAB487FC7ED88474CE30B7794046BDE9F0A1386603066BDEA9E01009757BAA1D90A28D22DACF51EB217C7CE9A435563A51F73E09694C0726E126C8B76C56409DF625EBF1C43B9943FF4FAF41219C9ADF077F485B32BE45233CCFA9C8F1D4CD4F0E92774981F81488DA86C4FF9732AFE25F3FEFBC7ABF1DA5593A011E69DBDBFDC9D37AA0DFFF7A515DAFEE5E51F50E4287D472D0DE7884F3D8E29B63B05507ACD9F0A2A3846446B2E7DD51A0E871D5321806F499BBB95DB1B14261B18738557CF0FFAE51C34DE0503EBBFE1DCD5D21C45BEBA1B584C94F36B343EBE0753922594C2A69E33875AE6D12B8057546F0754DD4C79EA21DA88D10BBD7EE456713F54B249CFA58714FF926F20BD9D0FD1E485951FDCFE96067BE1538C9D64B8CE4C00905B10D73D19034E2D20BE88E38B2F790E34E19D248FF53D476B7D1654B39524C2A0ED4E7E85D87E5AF101D932FFBBC4A2ECB532F7439DE683854A650DA9B5C0527A3B6CECC3B7FEC94721065CEE393858B20EA9F6A60DC434009815CE2D23CDB6E2306A869029CBF5071D151437BAD7868FB112F1BD350D40C6911DAD8C6D8B125BDC922D31605AE342DE52D7781FC5C2A8CD40486C6C0FDEC7BC188CCA2BC075E6B4D9BE190F7F70E7F5523F2314D47279CCF04C8AB8A4B595A7B375126FCD7FA5525B688BAE188A14F81C
4B8A5A98180881886F21228D13BC1AA25A1F61FBFF2C9F45AE3DAD13295402BE810B5834803627642B0CDC07593129AEAE8DBB739335F8300FD4D7E5BEDCA4BB1B2959D09EF07E0A275CE4551BBB95FB57BC0A66A054896469DE7257996F3E08969BB2806D1CE8F1B68EF8F102DE286FCB44BBCF084602126A28A13ACFE864BCBB27673CED8F159373BE257926790410D88B330F16124FC64FAEB3234C9BC1A608E843BC9500171E92C968BC853F0BAC220651EEEC6FB0B61EB0634BA089B85B496C2A2F1486E666750DBCF5975C11F8F199B55686E14789BF1B7FD4E69336B463BDE36EFE08A1395CF55487B275AB8678D4649719BB049E2BF3C458D84343C9AF5C7F267C1AC932E0E20893519F16E14F7C6435FC691F1BD518EECA1560C1BBF9CC9C2B78C627A442A4D9B0B23ADD1C8C4F86F7A6C1FBF37F6875B1152754255C4E5C3BC5CC892813C254AE2D5A8AD275B270268BF25059B4BBDF6E460F0B3EE8D0A5E5E850CE9C3B700F545D9088CD168ED440B16B0EE9657E62979E69198D1317CE92F94244760A9D9A2B45935A3447B5DF6BDA3287FB255DFB23E14FC91BB7C4BCDA1299F577703B58A624DEDAA83E1AE1C83E521B7575E57145AAE9E2B3B832D59DB977CF2E423ADE687190A9DD44A8D7EED3B1917C14C535E25C49D2D89076BB847ADEB11BF9C8A13C7AB298E4806CC4186AB28E3A8C6A855FEDAD87C9CDE544412C32756F692326980E2AE4A56A26F4E672492EE6F84549090209FE58C72076EC35B5A63862D632E467F0867AFB8E7059EAE4DAAEDBFE4BA591A5F208A523A88CD38B911485BD22F9536FC4FF3ACC18AF03F1578FD77589C2A4D81127ADE371C3DA49B9DAE778CB180065498E23A98645161021EF3AB0E48B2B442E9491611CF0892CEFB69F16BCECDCE4860229AEDC29C73CB437FF6938B9407A3CF2445B3C1329B46A8124280F8381933C92628B00425D388E14E18887712823337B848E59CD0EFC220E455D498ED3DC27FCB4935D9E707EE5C18288C4E4E28B1D12EC8C65C66BA8DB6E19F71B84FC9A358D8D0E264E6BDF1AE64198B829E35368A85F76CABE89EE00280A228A72C6299B444A8CBFF6CA1D71AAA7E775F4AB8EAC0252717E42E1ED7F0C489B0124FD412F421F13CFEA1A943861E27E0F60F29B622F54592FF27A2DBBC25ECAB37DD9E97395CCD9B469460F89E7810C8954CA007474DF613C01B215DAF2A053727B360DA0B9951C88F7C136352C26D88569A70D504C58D5EF6E2E09BF485B2FBE3C32EDE8DFEABB0EA08A4DDE992E38EEF09D1CEC68F73AF28491268AFD86299CC4F1FA9CE70B94EC9700FCFDBA0ECD7050E9AB3C333084E67D1739714F65B243DF8DE94DA681CFCB532F0E49C875876906E290323451D3CC18F9B4326FF031833DAC2AB8A06F67A91902D54349C93EA368098AEF89
2B107956086FC7B6D8C8792BE2757361DEC270FFF3C13C83B9CEDA2A7E6F95B08E7A2AADAB39200BFD6B2D42E01CB3B083AFA37D561CEF84EDA36127F3441513E295BCF5FD5AF299401B39D8B8C36C652BA6677B57628322E73FADD88E06CAD6FBC7FAE1E5775AE87040E0026A800558C474DC5EB6F1112E7C18D7CB79046F4FB8B73112B98CE653F61E6033C9B1E8116B774D329E382269F50B8072D672C7B2F4CCA3D1C98A3993AFDFD0D193AAB048C18AC61C6B529575EE813AEDB857AA47CBEF4BFF7B4B71255746B19A7BA81D9E22104C821620EBA510D5CA816C9D74F06956DA4B08456A5E12A4C1A876EB8B0FF790EAF6174CD0BC210D6653A10DE45D39A5C7B0F9752BBDF665F52156BCD291F6E2F82808F7DC5D3DC5BFDE5900694F1B3154BECE8393C8F8A3A5BB82E20D463715B27BDB9E5D7048BD8878D5A1CEC5666B030714BC306258E37416F80F55304D3808A1BD1C8E59FF24726EBA4F24FC32FAD1BF2375E56AD60BDD92401DCDF5B63C48504AF6C5E2C53CFAAFA7EB0B4A3225D90BA96ECD57928550A15AEC895847B52DF011036B748BCDE8DB26560A232EE0FB386E0C9847927FB77E92611B3D0752222CDA685B4CB748095C01ABD7107915F1CBBE2804BBA63768015B82EB7340D8E62F66E1B890F5B9E60EE60169FF912E4ECD9E6CA89C19B2BF8D457CBD3A97C93403B77DAA7D3B4BD305A81E17118E514D12C7400C62FB516E48F6ADAEF43D816D11992463DC58A6CD5FBEE53105AB8AD2B0C132F80C6393AD8E41D854E20944396072E379AFAAFE0E6894079784CA0819AF44A2599D08476B1B293FFE5D20739D2F3E3369A60F8F50DED9F547D6B00D4D679628CFFF991CE655095EBE7B54F0CFFF4755318EA08DBE668B7CCADB8BB4712ABA7FC7D1B6F3DC906C627E06B9F42F90BA805CA6E89B2816E3806859D7411AB97CB22724A26A78E4D2404580D9C8D6787EDCABB5F01C6FCAFE92C3FD6E82AF0304C75114D388CB3D67D557AEA2418224C7FB541042668888755F33223495570633AEC6664E1939E874514C9515ED385C87CE3961E9086585807817FA23FF7DDF1747E08A43E9872EDA649F4CC02F08E73D70610C99A4C847D762CCA63FBEF8FDF1FAB8CCCD496834BE68B2B4BC29F2DE29A39C889246A8700CA74A1AD6A779D8BE5992643E5B4176BCF71DF4D1E47983275ABFFA63A77FA1B113D0590623587D6DC23CF1CA106856F27388C3DBF5582208EB4D133000492CE67F79F7B9F7871F56446E8E9B083BC9111E296E9621604A9540897FEE1995AD3A742EFD0DA52BFCA801BB999EB322C9F543923E957D1C8E07F5E72DB18E1E6D36CAE2FE1FE2CA63A7CF5AD7CB2EF2C61214D51259CF1935D5EA5B7DAAE185F205D8F754E5F814812298C3104F1840C93CECA49A44D809C384D46E16042CF84039EF51C4
75811A46344C1CD99535DDC533FE8F564386247E28CC955963D71BC30643CC6A57347FB08076AFEECBE360B5C3E61E624B2FF7B1F3B421979739FEC98B25FFF3E0D318F07378ACA521E58011D084D825A44E671A5821B379B6DD3C8F15778DDED6D39F19A9909E9BD24396870713541F0E2CBA3E5DC40A7A481CFEF7866AAA57A2E5445B23DF80A9B2A4C91799A9136162654F7BDA8E5C535F2B912D139E7B0547DA43C332B4D231F12E4DFB5A070DD2FEAB2932F2331218B5557330E944D884539CFD9C64D1129E735C0097822F0F8C03EF77F341C74AE03428D9C0263617FB95FAEB4600C3E0F148714AEBDF6D6CB2A4ED36CA42D256D755E029E3718A623E5C47ADF6013CDF0C87D7B523A4AA3364806514E3E45D5728D86E8CD86474F7E43E0E0C71AE12C1FDE72064DA439DAECBC829C0388681FEC394BBEF35418203D0B0C24120D28CC150B2E8A652816BFC5E66691B45BEF2502E20A845F9DA2D9D5657EC284E688451FB314F49F8BE5992B942891FB21D8EEDB79053BACD452DE55AA6235427D1FC0CA142BE57066E9378714B2EAD71746EDE9CD075DABD1041C611A1E6F4FA8AA1CABA0B3B8F663504464A245A5E5B0C7C24060E9D346C4EB45763DE66FB46E456BE4A7831F0910A869AF846C1DC40BF0CB758AA8D4AD85E5A33FB4E89BB66652EF82BDFE6C940B6953B612A45C7D64FDE89D973673E80D9CBB4AD2430C085C13D3953B8275B0CBC5338103420A2EF7BC5C61F6368F454C833FC26AF6BC46D3099876790C89A9242454BBB8DDC925B8B26395800EC738936BDF1B5F4C848FFB0D73FC7064E68656F4EFF1CE4D1AFE8727B759C13035D9A49517E77E7AB1E1DD88EEC799132A27DD2ED5E7A3EB3F8C4C7631DC5F01F434501FC29B7308AA83F743DCB4D48B108E3904877E927347281A9B6C5CBFB1248E35D8D3C83677F64F6A1FE89B7CA09230C15DE73146F4CA99EF06516A0BF54887F12C398E8ACA6A8C9B673FAE550F336D6403F58B9D802A36CCE62A17F4594BBE2F572CA738C8A41C82EABE230023728C0CF10AB923AAD882B97CB382FE5F623A8326D7233B87B6DDD60DF92FE6B77C434600265F5FCE8C36EF7375AE498505DB522683F3FD4D769A8B6FB5BBA102B15ECB6FE53EEB03DFDB26164277A4A705E863FCA153459F1145A800EDF152B6DFBAD27990B5F9442EF8BBD245B14967DEFA076C8397AEAC20CCA1DE292CB50ED72169E713C93C791F82F777CF82A67D812B49CF35E11697935DEE96732AC809DFD5BEF9AE4A1D8CB3A1FD4EE174057899C199709585303634883D11C30F79AC18415456BA3AF9594C7824CA781706D50B66E79BD42D02923A9E699BEBC8012DE788840387451F2B096CFCA0426857DCA431C1492B6A8E5E46E7610FFB7E61F8E2444326A80E11C347838CB4CE7B001DCD9B4318B8012
AD4A8761651BACA5CB2AC135A0632532B405BC4D8CC6C59F72443E9772C4C62D4B9579D366396EB9C583891011996671564877676E83A5DA86401A4946D722593130D7CDFCA503F848945A8AF33EE3AEFC216C272AF84E70FF844B14B20F8B51CE68DE18E719C0E2B08ADBA25DB9AAECFFEEC65ACA4E73CEE7837929DA56FA763BADCE7B7402419A3C94238851FAC4CB93CB4D04815A34460B4307E8BE46F7932DD6B60E33AF626437EDF68292F8A52974BB7C8DEB9790BA509E2C4C6241BB54088A58043B432EE562C61D1FDB85B0FDF9E4239C82A395
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Courier cguidfix
/F1.1/Courier renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 0 524 38 rc
5 34 m
515.23621 34 l
515.23621 5.6535435 l
5 5.6535435 l
h
5 34 m
f
1 J
1 j
0 0 0 sc
1 0 0 -1 5 34 cm
91.5 8.5 m
153.5 8.5 l
153.5 22.5 l
91.5 22.5 l
h
91.5 8.6885242 m
S
0.5 w
0 0.61960787 0.4509804 sc
91.731537 10.200946 m
103.75792 22.227329 l
103.66953 22.315723 l
91.643143 10.289339 l
h
91.731537 10.200946 m
S
101.39027 8.5039368 m
115.42105 22.534718 l
115.33266 22.623112 l
101.30187 8.5923309 l
h
101.39027 8.5039368 m
S
0 0.58039218 0.42352942 sc
113.0534 8.6639175 m
127.08418 22.694698 l
126.99578 22.783091 l
112.965 8.7523117 l
h
113.0534 8.6639175 m
S
124.71653 8.7308464 m
138.74731 22.761627 l
138.65892 22.850021 l
124.62814 8.8192406 l
h
124.71653 8.7308464 m
S
136.37965 8.6639175 m
150.41043 22.694698 l
150.32204 22.783091 l
136.29126 8.7523117 l
h
136.37965 8.6639175 m
S
0 0.61960787 0.4509804 sc
153.05379 10.823637 m
141.02739 22.850021 l
140.939 22.761627 l
152.96539 10.735243 l
h
153.05379 10.823637 m
S
143.3504 8.8192406 m
129.31963 22.850021 l
129.23123 22.761627 l
143.26201 8.7308464 l
h
143.3504 8.8192406 m
S
108.2271 8.5923309 m
94.19632 22.623112 l
94.107925 22.534718 l
108.13871 8.5039368 l
h
108.2271 8.5923309 m
S
119.93487 8.8192406 m
105.90409 22.850021 l
105.8157 22.761627 l
119.84647 8.7308464 l
h
119.93487 8.8192406 m
S
131.64264 8.9688473 m
117.61186 22.999626 l
117.52347 22.911234 l
131.55424 8.8804531 l
h
131.64264 8.9688473 m
S
148.04279 8.8804531 m
153.05379 13.891446 l
152.96539 13.97984 l
147.95439 8.9688473 l
h
148.04279 8.8804531 m
S
0 0.6156863 0.44705883 sc
96.519333 8.9688473 m
91.508339 13.97984 l
91.419945 13.891446 l
96.430939 8.8804531 l
h
96.519333 8.9688473 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 49.629631 18.248219 cm
/F1.1[ 12 0 0 -12 0 0]sf
-39.606445 4 m
(!"#$%&'\(\)*+)[ 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 0.000000 ] xS
1 0 0 -1 237.27676 18.248219 cm
-25.204102 4 m
(,\(-."/0)[ 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 0.000000 ] xS
0.60000002 i
/Cs1 SC
1 1 1 sc
CM
269.86337 25.311476 m
331.65866 25.311476 l
331.65866 11.311476 l
269.86337 11.311476 l
h
269.86337 25.311476 m
f
1 w
0 0 0 sc
1 0 0 -1 5 34 cm
265.5 8.5 m
326.5 8.5 l
326.5 22.5 l
265.5 22.5 l
h
265.5 8.6885242 m
S
1 1 1 sc
CM
270.17496 23.799055 m
282.20135 11.772671 l
282.11295 11.684278 l
270.08658 23.710661 l
h
270.17496 23.799055 m
f
0.5 w
1 0 0 sc
1 0 0 -1 5 34 cm
265.17496 10.200946 m
277.20135 22.227329 l
277.11295 22.315723 l
265.08658 10.289339 l
h
265.17496 10.200946 m
S
1 1 1 sc
CM
279.83371 25.496063 m
293.86447 11.465283 l
293.77609 11.376889 l
279.7453 25.407669 l
h
279.83371 25.496063 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
274.83371 8.5039368 m
288.86447 22.534718 l
288.77609 22.623112 l
274.7453 8.5923309 l
h
274.83371 8.5039368 m
S
1 1 1 sc
CM
291.49683 25.336082 m
305.52762 11.305303 l
305.43921 11.216908 l
291.40842 25.247688 l
h
291.49683 25.336082 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
286.49683 8.6639175 m
300.52762 22.694698 l
300.43921 22.783091 l
286.40842 8.7523117 l
h
286.49683 8.6639175 m
S
1 1 1 sc
CM
303.15994 25.269154 m
317.19073 11.238374 l
317.10233 11.14998 l
303.07156 25.180759 l
h
303.15994 25.269154 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
298.15994 8.7308464 m
312.19073 22.761627 l
312.10233 22.850021 l
298.07156 8.8192406 l
h
298.15994 8.7308464 m
S
1 1 1 sc
CM
314.82309 25.336082 m
328.85385 11.305303 l
328.76547 11.216908 l
314.73468 25.247688 l
h
314.82309 25.336082 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
309.82309 8.6639175 m
323.85385 22.694698 l
323.76547 22.783091 l
309.73468 8.7523117 l
h
309.82309 8.6639175 m
S
1 1 1 sc
CM
331.49719 23.176363 m
319.47083 11.14998 l
319.38242 11.238374 l
331.40881 23.264757 l
h
331.49719 23.176363 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
326.49719 10.823637 m
314.47083 22.850021 l
314.38242 22.761627 l
326.40881 10.735243 l
h
326.49719 10.823637 m
S
1 1 1 sc
CM
321.79382 25.180759 m
307.76306 11.14998 l
307.67465 11.238374 l
321.70544 25.269154 l
h
321.79382 25.180759 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
316.79382 8.8192406 m
302.76306 22.850021 l
302.67465 22.761627 l
316.70544 8.7308464 l
h
316.79382 8.8192406 m
S
1 1 1 sc
CM
286.29553 25.407669 m
272.26474 11.376889 l
272.17636 11.465283 l
286.20712 25.496063 l
h
286.29553 25.407669 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
281.29553 8.5923309 m
267.26474 22.623112 l
267.17636 22.534718 l
281.20712 8.5039368 l
h
281.29553 8.5923309 m
S
1 1 1 sc
CM
297.7533 25.180759 m
283.7225 11.14998 l
283.63412 11.238374 l
297.66492 25.269154 l
h
297.7533 25.180759 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
292.7533 8.8192406 m
278.7225 22.850021 l
278.63412 22.761627 l
292.66492 8.7308464 l
h
292.7533 8.8192406 m
S
1 1 1 sc
CM
309.71106 25.031153 m
295.6803 11.000373 l
295.59189 11.088767 l
309.62268 25.119547 l
h
309.71106 25.031153 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
304.71106 8.9688473 m
290.6803 22.999626 l
290.59189 22.911234 l
304.62268 8.8804531 l
h
304.71106 8.9688473 m
S
1 1 1 sc
CM
326.48621 25.119547 m
331.49719 20.108555 l
331.40881 20.020161 l
326.39783 25.031153 l
h
326.48621 25.119547 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
321.48621 8.8804531 m
326.49719 13.891446 l
326.40881 13.97984 l
321.39783 8.9688473 l
h
321.48621 8.8804531 m
S
1 1 1 sc
CM
274.96277 25.031153 m
269.95175 20.020161 l
269.86337 20.108555 l
274.87436 25.119547 l
h
274.96277 25.031153 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
269.96277 8.9688473 m
264.95175 13.97984 l
264.86337 13.891446 l
269.87436 8.8804531 l
h
269.96277 8.9688473 m
S
1 1 1 sc
CM
327.53571 25.180759 m
313.50491 11.14998 l
313.41653 11.238374 l
327.4473 25.269154 l
h
327.53571 25.180759 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
322.53571 8.8192406 m
308.50491 22.850021 l
308.41653 22.761627 l
322.4473 8.7308464 l
h
322.53571 8.8192406 m
S
1 1 1 sc
CM
315.30524 25.05356 m
301.27448 11.022781 l
301.18607 11.111176 l
315.21686 25.141954 l
h
315.30524 25.05356 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
310.30524 8.9464388 m
296.27448 22.977219 l
296.18607 22.888824 l
310.21686 8.8580446 l
h
310.30524 8.9464388 m
S
1 1 1 sc
CM
304.23218 25.407669 m
290.20142 11.376889 l
290.11301 11.465283 l
304.1438 25.496063 l
h
304.23218 25.407669 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
299.23218 8.5923309 m
285.20142 22.623112 l
285.11301 22.534718 l
299.1438 8.5039368 l
h
299.23218 8.5923309 m
S
1 1 1 sc
CM
291.31827 25.031153 m
277.28748 11.000373 l
277.1991 11.088767 l
291.22986 25.119547 l
h
291.31827 25.031153 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
286.31827 8.9688473 m
272.28748 22.999626 l
272.1991 22.911234 l
286.22986 8.8804531 l
h
286.31827 8.9688473 m
S
1 1 1 sc
CM
280.02951 24.658768 m
270.00754 14.636783 l
269.91913 14.725177 l
279.9411 24.747162 l
h
280.02951 24.658768 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
275.02951 9.3412313 m
265.00754 19.363218 l
264.91913 19.274824 l
274.9411 9.2528381 l
h
275.02951 9.3412313 m
S
1 1 1 sc
CM
308.99152 25.119547 m
323.02231 11.088767 l
322.9339 11.000373 l
308.90314 25.031153 l
h
308.99152 25.119547 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
303.99152 8.8804531 m
318.02231 22.911234 l
317.9339 22.999626 l
303.90314 8.9688473 l
h
303.99152 8.8804531 m
S
1 1 1 sc
CM
297.34171 25.496063 m
311.37247 11.465283 l
311.28409 11.376889 l
297.2533 25.407669 l
h
297.34171 25.496063 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
292.34171 8.5039368 m
306.37247 22.534718 l
306.28409 22.623112 l
292.2533 8.5923309 l
h
292.34171 8.5039368 m
S
1 1 1 sc
CM
285.46671 25.371063 m
299.49747 11.340283 l
299.40909 11.251889 l
285.3783 25.282669 l
h
285.46671 25.371063 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
280.46671 8.6289368 m
294.49747 22.659718 l
294.40909 22.748112 l
280.3783 8.7173309 l
h
280.46671 8.6289368 m
S
1 1 1 sc
CM
274.21255 25.394154 m
288.24335 11.363374 l
288.15494 11.27498 l
274.12418 25.305759 l
h
274.21255 25.394154 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
269.21255 8.6058464 m
283.24335 22.636627 l
283.15494 22.725021 l
269.12418 8.6942406 l
h
269.21255 8.6058464 m
S
1 1 1 sc
CM
270.13254 18.619524 m
277.14792 11.604135 l
277.05951 11.51574 l
270.04413 18.53113 l
h
270.13254 18.619524 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
265.13254 15.380476 m
272.14792 22.395866 l
272.05951 22.484261 l
265.04413 15.46887 l
h
265.13254 15.380476 m
S
1 1 1 sc
CM
320.6749 25.146942 m
331.49866 14.323197 l
331.41025 14.234803 l
320.58652 25.058548 l
h
320.6749 25.146942 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
315.6749 8.8530579 m
326.49866 19.676802 l
326.41025 19.765196 l
315.58652 8.9414511 l
h
315.6749 8.8530579 m
S
1 1 1 sc
CM
331.49829 17.655031 m
325.48511 11.641839 l
325.39673 11.730233 l
331.40991 17.743425 l
h
331.49829 17.655031 m
f
1 0 0 sc
1 0 0 -1 5 34 cm
326.49829 16.344969 m
320.48511 22.35816 l
320.39673 22.269766 l
326.40991 16.256575 l
h
326.49829 16.344969 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 414.22018 19.913385 cm
-28.804688 4 m
(\)"0.1$/.)[ 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 0.000000 ] xS
0.60000002 i
/Cs1 SC
0.64705884 0.64705884 0.64705884 sc
CM
450.30679 26.259258 m
512.10205 26.259258 l
512.10205 12.259259 l
450.30679 12.259259 l
h
450.30679 26.259258 m
f
1 w
0 0 0 sc
1 0 0 -1 5 34 cm
445.5 7.5 m
507.5 7.5 l
507.5 21.5 l
445.5 21.5 l
h
445.5 7.7407408 m
S
ep
end
%%Trailer
%%EOF
