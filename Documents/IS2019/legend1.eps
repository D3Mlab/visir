%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 888.000000 43.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.6 (Build 18G2022) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 888 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 888 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Courier
%!FontType1-1.0: Courier 1.0000.1.0000
14 dict begin/FontName /Courier def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /R put
dup 34 /a put
dup 35 /d put
dup 36 /i put
dup 37 /C put
dup 38 /A put
dup 39 /l put
dup 40 /hyphen put
dup 41 /G put
dup 42 /r put
dup 43 /e put
dup 44 /y put
dup 45 /M put
dup 46 /I put
dup 47 /L put
dup 48 /P put
dup 49 /B put
dup 50 /S put
dup 51 /n put
dup 52 /t put
dup 53 /K put
dup 54 /m put
dup 55 /s put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1341 1 index div -838 2 index div 2177 3 index div 2231 5 -1 roll div]cvx def
/sfnts [<



001A0027000271411B0039002700490027005900270069002700790027008900270099002700A9002700B9002700C9002700D9002700E9002700F90027000D5DBA00220027002E111239BA0033000B002E111239B8002E10B8004ADC00B800004558B800182F1BB90018000D3E59B800004558B8002A2F1BB9002A000D3E59B800004558B800072F1BB9000700073E59B800004558B8003D2F1BB9003D00073E59B8000710B900000001F4B8000ED0B8000FD0B80010D0B8001810B900110001F4B8001FD0B80020D0BA002100070018111239B80022D0B80023D0B80024D0B80031D0B80032D0BA003300070018111239B8001010B80036D0B80037D0303125333216151406232122263534363B0211232226353436332132161514062B0111012B012226353436332132161514062B01011E01133332161514062B01222627262F012E012707019A433B302A3BFEAA2223272F2040404C2A232201563B2A364B2D01A10C16312C2226012722242F3C0EFE7D57A2AB123E2A232260201D0F0966273F7E476E8D202528202523252003851F29232520282820FE6901972226272125232721FE8A12BCFEBF1E2723250E190EBD4975750A68000100390000046F04A200280093B800292FB800002FB900070004F4B8002910B80014D0B800142FB900270004F4B8000710B8002ADC00B800004558B8001C2F1BB9001C000D3E59B800004558B8001E2F1BB9001E000D3E59B800004558B8000B2F1BB9000B00073E59B800004558B8000D2F1BB9000D00073E59B900130001F4B8001C10B900150001F4B80025D0B80026D0B8001310B80027D0B80028D030310134363332161D0111140623212322263534363B01112322263534363B01213332161514062B01112103DF1E2A24242622FC892F24242B4C7D7D4A2D25272B01C32F24262D4CA8021401934B2C25272BFEB723272424281D03851F2925232424291FFC7B0000000001000C000004C104A2004100FBB800422FB800182FB8004210B80037D0B800372FB80035D0B800352FB8001810B9000B0006F4B8000DD0B8000D2FBA00000035000D111239BA001D0018000B111239B8003710B9002A0006F4BA00250037002A111239B8000B10B80043DC00B800004558B800042F1BB90004000D3E59B800004558B8003D2F1BB9003D000D3E59B800004558B800142F1BB9001400073E59B800004558B8002D2F1BB9002D00073E59BA000000140004111239B8000410B9000B0001F4B8001410B9000D0001F4B8001BD0B8001CD0BA001D00140004111239BA002500140004111239B80026D0B80027D0B80034D0B80035D0B8000B10B80036D0B80037D0303101133E013B0132161514062B0113333216151406232122263534363B010B010E01232226270B01333216151406232122263534363B0113





2C00025D41170038002C0048002C0058002C0068002C0078002C0088002C0098002C00A8002C00B8002C00C8002C00D8002C000B5D30313735343633321716171E013332363534262B0122263534363332163332363332161D01140623222726272E01232206151416171E01151406232226270E01232226B221252918100D2AA4636A80677D37CCD6D1BD4DA0040B3E1E222120231E2C1F143578515E7376C3D0C0D4B4398C6A233211232548B22C2638221136415646473C8E8784922B27323275352F332312312B53403F360405878D87A2151917173100010058FFEE046204BA003000BDBA0007002300032BB8000710B9001E0004F4B80027D0B8001E10B80029D0B8000710B8002FD0B8000810B80030D000B800004558B8002C2F1BB9002C000D3E59B800004558B800172F1BB9001700073E59B8002C10B80006DCB900000001F4B8001710B9000B0001F441170037000B0047000B0057000B0067000B0077000B0087000B0097000B00A7000B00B7000B00C7000B00D7000B000B5D410500E6000B00F6000B00025DB8000610B8001FD0B80020D0B8000010B80026D030310132161514062321111416333236333216151406070E01232226272E013D01112322263534363B013D0134363332161D010377312D2A2AFE6B55675BFE1E1C27313B629D45759F271411AA2A2634557125272C22036422252323FEB2A4686A281D21311727244B4A2360641F014E2125291ECD352B293259CB00010039FE71048D039C002F014CB800302FB800252FB8003010B80014D0B800142F4105000A0025001A0025000271411B0039002500490025005900250069002500790025008900250099002500A9002500B9002500C9002500D9002500E9002500F90025000D5DB8002510B8002CDCBA00000014002C111239B8001410B8001BDC411B0036001B0046001B0056001B0066001B0076001B0086001B0096001B00A6001B00B6001B00C6001B00D6001B00E6001B00F6001B000D5D41050005001B0015001B000271BA001F0014001B111239BA00200014002C111239BA00210025002C111239B8002C10B80031DC00B800004558B800172F1BB90017000B3E59B800004558B800282F1BB90028000B3E59B800004558B800072F1BB9000700093E59B900000001F4B8000ED0B8000FD0B8001710B900110001F4B8001ED0B8001FD0BA002000070017111239B80021D0B80022D0B8002FD0303101333216151406232122263534363B0113012226353436332132161514062B0109012322263534363B01321615140607021B2B49342927FE332F252727D9A2FE914231282801173826324325010F01142745342639F729272C38FF001F29232420272424013F02CF202823231F272820FDD902272028271F2323262002000001010E0000051704B40045

BF0002005F004A003D002C0016000000082BBF00030048003A002F00220016000000082B00BA0007000400072BB8000020457D6918440000
00>] def
/CharStrings 26 dict dup begin
/.notdef 0 def
/hyphen 1 def
/A 2 def
/B 3 def
/C 4 def
/G 5 def
/I 6 def
/K 7 def
/L 8 def
/M 9 def
/P 10 def
/R 11 def
/S 12 def
/a 13 def
/d 14 def
/e 15 def
/i 16 def
/l 17 def
/m 18 def
/n 19 def
/r 20 def
/s 21 def
/t 22 def
/y 23 def
/Omegagreek 24 def
/Omegagreek.mono 25 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1341 -838 2177 2231}def
/UniqueID 4459673 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5593A4CA8EDA7BA9920B3E316B42F6C580C691FBCE004340131C993D0F1A3A789023FFFC228FE51791ED8110F521503CCE25C52414755D5D3984DD0A27C71220FD57D5901CB3C5B598E419C748E9E02A39234D98B60525967ADEA203AEC1A34CE54516013E7F2FC655251E12DAA13B3736E7D8DC05E2FDA4F214A18BC42547936DBC34C04CBABD22AFC5C2DFCC4E18B3E28E06915B94CC41F99CF4F9086D2F999782AE9BD7CCE0B24786FC21DF956927D7663AD9D8A79ECF5856EF5A82F224BAC218A89F93B435A25162C2A99ED47A6C9F437AB6C2297398DB1AF4EDC9635B6F67A94B7E6BB0A5AEC4F5ACA89E8D2626BD9DD897E4CD70415A80392344DBD59F9B2336601CA03241D03AADD5CC75B4AA6DCBCCADB4C20D1706FBCF46A787D05F80F4C64E5E65E799E55BFD34744017F19FC1FCA267CB6D7BDC0E1BF4C2BBAA0CBB78C302E2856EE95E1567C5010B73CB523182F880754BA92730EEEEBE6C3C244A143C667AC475E96FA2C5FCC7B2EF702029BF9A44F926352B516083802C30B51112DCBADE33F4457F509B3EA3272A5C2E61A3ABE469A18A6FBD6FB6CD0A6104878CA5EF687C372890D79F1623008073A439184C42F72FEAB71D214171458EC5DD8901ABD3950ABE70EA9A3F6C12AD3DC2D437A7709358736C449F2371300B9228C4D7C3C85C2D8D18C7C460FF8FA8F9F6C4C0887CD13F21B19B82057FE2C863CB61650C18C152933CD9C1F672C7153BD762E0CCAEFB6E4831013DC6BEB223329013B86D677619DE08E90369073611B904C983EE379787F4AA394DEC646EEB2FC7C4055

9FEA3E0AD8D16139F8CE160AC62D5F91C7834FC4B8309E11CBE1A8DCDEA15B4F774AE363BD7104D5E53C495B7E88CE6165327A1D0BAB65858CBCC59E0694740F05B73DD55F78C26CB09691787CD000A863B37E0CB0382EFF3CBD156F58920EE9E52823922C9C262ED88C241332010F495D4BF11B5CBC2DE3C4A5F6834F3C7981FE7F4577E9487886D6B90743B5DA582FD8A683C37A720AD707AF3E725FA12608CF64F473563525FB7E05252916F9B2624C0E1620F1082BF3EACBAC89778C4B07DCC168B94C5631B4856FCBEAA83AB25231F161D10E017B968CA96C32CA6872F9B0D761A2727B7C9DF81DF0B6767E5CA6524BE7A2C9C7481D4B96DB1890C6059A575A623EED8E51C1496E5A17748C43D56B6109D2D233752D62BDA6BCD657E62087889BF5133DF49E83227CDBB9DDD9CFE0FF3F25D98B27FC505E82847840B45C359076D1897C73AA63C4050955673E47C219F6FEA72C6DF6ED908E455617D03AD75545E1955B9D4807C3E147D2CB588DF1F52588D56A7060BDC3FBE75667B30901430616DE2AE7D5BF4E5022D3039D96FD02A4A3F2AC39F795223823FC9AF2C77072BA7A568793AEBA2F240246548EED7D45A5F8D45CCF89F3CBDB547BF7887D81A7B9D056B6512D2664F02F10BAAEBB8C24767F96BEF4C0C17E7BF2CEC5AF432A114DB09CE7838114896D27EDC7D18D956A7E43CACDB885F9A1CC75315338964A69B5EDB6AABD24DA78854B0099EA195FBA3B81003F624AAB1C704F066CB04B7E3418B99D9A57942D68699FBB5F9B4B33CBB0F8B9238E56ADD9BCB8F8A4E94CE7344B1A53312DBE8C5A2C78E52F505663BC620993BFD82DDB01F9CBA61D14753FBF02AF9C0170C045D9E01E0FF0C27C35844D9563EEA706B94F3AC75F4389C3656B539AA0BA0A58C9307208FE3C988C37E34A3A7FB85C3A9D0CE0D839190F6222202EEF3BB74368F44F5BFCEA10DB3837E00DE1123A808E34FADD67A4D72414D4AE4D8E323D922A2BC717C3972631E4C40FF0C0923D83E6D2E15044FF20271E0DDF8018078499020E72C14C054538235BAEEFAABD6AC150246A73DCDC001B7B82BEE55380779D790107CDBA2272D7ED005E74DAEB6A44196C90D23CAA9420A200ADB80EEDFAE39922A609F53A6A4A09493B3E33DB992D92A7BA8044021E2955BE4E9AB56180961498219DA882D437675251346259F6E2E9EEBF47B8120022E022635CBCF4043A1EA345171825F0DB592B39436B1D44F7884394A3C31252FCC74E536278864ABC6539E4C926D6DC93A19D18511AB7BAEED29943B12656D772CFA5C2DEED61F24EEA098D2EE3CD6C697AC757840EFFC35BA28882EB0172378D041D36045D276198973DB61B5C65C548B9FD7A17CC9534005C23A9A97E6AB56D8A8AA044D7902A0CDE79573AEE9E58091F08F3F31F23D9D2612154B22187938421
3F769D40A0CB582A3DE5380658B119F1FFF10FD03561BEB82B0364999A948BA9CA7523ADF7CC7F1CB36069BD023FC512585F5A1948F20A8DA6DA01865C6702DB9A0252B180DA5ACE635DC560791ED85BDB9757C676FC493D0D3E0A90666FDCA7180D4122862B9A0F4CB5F5200DE14CD46BF930953007B8B2CCD1437BAFA9D644CCFBBCD7FA93C6585E6FD1DF572567FAD11895C1883F48739B42E324BCC8D78FD112FEF36BFAECE47428B2F2EDAA071A1D68BD82FB078892D858BAD2BDE4E6C29A741305BAA564AAE4CEEB075B034B1D7178F3E738B14BA95691936AC3CD27AD4C5EA2990D6CE31602984A2DF1121248E8E4C8D9D867642FA1E7E852321F09B9D665268A29DC45A3F1424DA701E11CA4F1702AAABDB5151819DBB9ABD49E9735C6F3D21110EBEC4A24C0AC6F8A33E6E95CDA30C23E9C60E3B3D729805653B68E6E09E3D94D064E0E0E559DF50033B87B62CBD24BA8D864B5FF91565773FE53268783D6CE060277459884EE5537AFFE409BC4119D8A10AD9C4F8738E31EE6136E86ED874848A3129B610D6AD94A1084B93CF7FDF402F4969A9409EBB41949F3B061863DE8F07DE06AD683EC682329D7523C14D8FF4CCC7946EE0A255B8967E99ECB6E362B0B58D0993C2B77BD4E1BAE24AEE17D747F9DDAF277B29E15A202A3B7E12720CA427B2A614B899686F8B90CABEC937BBEE274C47ED46ACA1DDD86C4ECCD49447AE41F16D2DC807B02AFEED182AE668DF6B0738B5943AE4132583804E340697DEEE57B5E868C666C9F754FC4F56A9FAAF0AF69CC93E63E5AAEE239DDBAB59D23F1C43C97B2073A847BF1375EF5983E48B3C30035D3A218285D0D806168579A51319DA138B080DA279A2961AAD208D67F2CA9D644B24EF71DE07657C3259EFF13B37B13EB5B0C62878D9B4AF9921E3E9C5B4467E8E938A27F04D9241ECD14FFA917C9C2877B9246BFF1DB7C6BC6177772BB442869B20D855FA897DD8267C5ACAED861AD099CCFF74F975737686060FBC84BAF5BEBDE3EA3726A7CE29FF693F93BC3EB48A4606536034BC5B09A68D4DC0F6D28C131DDAFBA83181FD16564BE0C8C7424127E685E55BE78A7CC00ADCD0DA59A53F56C00ADA1529F59A853ECCBDEDD6B47DD9CECD19BFE40CF2F45D71D5720AD8B5FA8C2AEF8C1635C92939FC475736099633C8778CE279194D217D2B4379D85DD7BFEDC16A6169F210EAB4677A239F7523B7B717AB341A34389A72368072A1D3E7EC3C2D6E23AFA3A4700AE9EDBD39438504CF5F4A432A0E0D3A014A8139E6AAE8C6F2C12E3B01E6F389637CF36AD1B38F3DD9FF630C80AF1DF708DE7B3B1FB6BF1D19DA83DE89E0B7E63D3FE63BC69A559C301F227333B24AB0D9928FE79D77F96ECFB274F64A1ACF6AB1074C898B7D8351CAF610F354AE62D5AC833294910BB385A56F0E0F14A511756AD
D0C4FCB3851EE95C0BB1855E049E52F28E6481FD11719CD76E6DA47AF8C8505EE98FDB81DAFBED89596534644B5E8C68B7B4B82A7AE5E831DC18E7012E4F247B7D1DC1036803DB87ECFD1A5DCC7DCA091A610A2D9C30BA4729E5935CDE71FB982AC6C9C2724FFFE5242E6D081A509C38E622663A611E704023F3E3CB92731CC9A17A41DD802D516BF87CBCC02BDBEA6CDE650EB7DA1F9BBBAB68D33B6CD5B25CE82AEAEAB3F556BFFE54D22B9A1325918C25BAC1F250CD8E9CE708FD1B449DFFDE09DE8F545BBB736CC86FEFE43A746608488AD7006F57AEEA4A6651E9A15F6FB1D1493AD40C244C1C52A828395B0A8A1EAC3CF98EBDBD1D5597B540B3EE234ECDEA6905C11A01CD854C9282AB1EAD75DAE993E389CB5F979DF53273A2A8A948A993C39DDF6703AFB130122A21740AA5AFE2B0298B9F1432500CFE241E978E3824277E68ABCB9BE58891A45A200BEF570C4B02803F222B71ADA4DAE8776F446FFCC3A65B4536C2293E95FC655B8F655BF7B96A6FE0527B295D1BB19CB233B42796E3AEEC1559922A02608CC288C045878078442DFB0D12CC7C511B6A6F0E3279DB1080D29896FF3538066596265B36FD3EA626D1E54C8F8B9181C2EF10ABFA70F3AEA437C3F3039BA804D17EA7D439F6FE373C8FD92DDC0F1AEB672138E1A035658C43E939521BE4744E9823ACEC441A46FC7EB8150F803331E0A2276EC6E47B26A1AFCFC6D518BA05B392F3DF5DA7C135E34A6B517C5D24F9D7B8B2C4470F4B16E911FED461E4207092139698A05181A29B3FCB897121B02FD3A14D2DDEC40AF4188116DEC6427D757555CFB3A16303809A957A75899D238F9FC5FBEB1DAB57B7F6F4E236701A60C8999F909F4FFB29408E6449749CCD0F477BD733887E7A7DB60AFEFF5BB5263D02829B000522BAC93BCEAEBE57E9DE6DA5F6FFA91BDC9FA6139FFA7C863AC0F20D8189F4FF3D1FD52744FCEA9FF7DE39E119B0A4EDFB296EB88F689E91D57D3FC58493A64009A0EA3E52E88CF58EC9C23AE87006D4AF496BAD21B8ECBFB10DEC0318A83679ADF9108F62EB9741CE022C720746B03B55F7615781B1D0937F55DB499CAFE8B098FC06AB7C645710C75CB11FE78E12F35822ABB05F6DA3443330F34D2EF0BA7B42E941437987F261C2D92EC15FBBC28713BEC86D203FE6915A8E3271B5A798D2234B55434D23C9A1DAB3217840E3DC94245519618DBFEB03958C2DC3F6796FACDEEA5DE8E2703E0EFD971ACAC15C3C8B072900DA0D8AD5F1F19D159628BC5BF7587829FCF2645594926E583E03EC65999FCE0DB005CB7C1FE769AD956A6726109F86F2857C0772173CF12B29DB2CF884A057C611F76C2765FD92EEBEFE177153FB7A0B76D2CC015BACDB55AA2B0454FB71D90326181DB6BC3761D387D1B1C98E9D32CA3A67ADBD36356545944C6FB7B3667513

EF34DB4F39724600AE37581B9D1A27D36A588DBBF409D9166B8BF8402303F27C54593FB30190B07D8BE448507DD2391C1326C681154D1A8AA9464C7C96A28900F4AA2EFE7AEC410249FB0D6A65F06470B47D01A637DEEDCA015C8E10B0E8ED12C58374C7190037F5FA67E7CEFDADC8C44D868E5837E58873FA5984AE18144D3F9E2673FA03A6DBBD898C06E2EB92A8C838B16A0C0E4954CC9CBB2AB4E81478A8E318F8866CE839CB14D7F381C0FC3C61382E1BCA03EFB3D8748C1289886EA4D3241CF3FFDD5E9F7FD8E8A8DA69B29263598A8EA7AEB6CD5E28A1CA6E5AD3AEB172C3A623B8A580C92644D6222F0B374FCB2D38236E7F050F76F825552332DFAD32615907F644C5EC03FE6440410BD607BA132F1FE7E39F9544963FA4F17F98FDC2A046B9ACCC8B6B680F8087968616FACE6E1BC8009CEE6EEEF2ECDB00A0C5C9058FBA80EDF26393A2978D34C0E38297879D8B7B02C20C4CABDC397BD68A08A2D158C291E16FFD2433FBA869D4018AD3BFF82C208D6FBF2FAE452227086A036955E4944B8293D5EF7C11467AB40F267ABD9065F53CEE9B0851759E8D37837C3A6C268DD4D99628D2BA4855FE6EE88BDC047D9286F45B6EEC03912843F9CB851B3BDC811ABCB59087F3EA489A3CCA9B61A15193644671B32EFEF478620FE021422A5BBEB46B723C85C17E0AF9779FAB76C739B7E2000A72C67BAE829C4D83E54891E32FFCD7CF5FCB55EAB81DEA19773947D419758A22FA07E88D4E5B41ABC8D34A6F6369C678A07D03D6399BA9274A6FA930FA008053054EC8417AB2E97E2C098B843AC72AD4148E16B7325F345C910BE86A309853650A642B777B7916569BF27420D3F9E6C9C84C1F9F04085FEE4FFEA21075B4662D915B625FA94BD72E41314AE3ADF970DD2E773E543635C9EEC3CB095E7A42261F824DDCBD0126C8929635C62E8A2BE3F39744F3FE2CFF7E63DA96A5E15E327D36627AFAE112F9DDE08B874EEA08CF7ACE585259D135C88260EEAFBE58BE39954008B92632AA77ED0BC6ADB0B7824FA2F163
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Courier cguidfix
/F1.1/Courier renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 0 888 43 rc
6 40 m
884.74017 40 l
884.74017 5.984251 l
6 5.984251 l
h
6 40 m
f
/Cs2 SC
0 sc
0 i
1 0 0 -1 468.50131 21.166666 cm
/F1.1[ 14 0 0 -14 0 0]sf
-58.80957 5.5 m
(!"#$%&'\(\)*++#,)[ 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
3 w
1 J
1 j
0.60000002 i
/Cs1 SC
0.26274499 0.63529402 0.89411801 sc
1 0 0 -1 6 40 cm
341.33203 18.746719 m
392.33203 18.919947 l
S
361.81372 23.714529 m
371.85031 13.952138 l
S
371.78177 23.783081 m
361.88226 13.883586 l
S
366.73508 25.833334 m
366.92896 11.833333 l
S
373.83203 19.5 m
359.83203 19.5 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 674.00195 21.166666 cm
-50.408203 5.5 m
(!"#$%&'\(-./0)[ 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
0.60000002 i
/Cs1 SC
0.88235301 0.56078398 0 sc
1 0 0 -1 6 40 cm
554.99933 18.333334 m
605.99933 18.756559 l
S
2 w
573 11 m
588 11 l
588 25 l
573 25 l
h
573 11.207852 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 267.33398 21.166666 cm
-46.20752 5.5 m
(!"#$%&'\(102)[ 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0 0.619313 0.451406 sc
1 0 0 -1 6 40 cm
158.1647 18.333334 m
209.1647 18.756559 l
S
2 w
188.61891 13.28348 m
191.38641 16.050972 191.38641 20.537962 188.61891 23.305454 c
185.85141 26.072962 181.36443 26.072962 178.59694 23.305454 c
175.82942 20.537962 175.82942 16.050972 178.59694 13.28348 c
181.36443 10.515972 185.85141 10.515972 188.61891 13.28348 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 101.16666 21.166666 cm
-29.404785 5.5 m
(.3$4$"')[ 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0.58135444 0.0048924065 0.82820129 sc
1 0 0 -1 6 40 cm
7.3293962 18.333334 m
58.329395 18.756559 l
S
2 w
39.867531 24 m
32.780914 10.207888 l
25.694302 24 l
h
39.867531 24 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 849.17059 21.166666 cm
-29.404785 5.5 m
(5\(6+"37)[ 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0.988235 0.0509804 0.105882 sc
1 0 0 -1 6 40 cm
752 18.333334 m
803 18.756559 l
S
2 w
777.44324 8.272481 m
787.46521 18.294466 l
777.44324 28.316452 l
767.42126 18.294466 l
h
777.44324 8.272481 m
S
ep
end
%%Trailer
%%EOF
