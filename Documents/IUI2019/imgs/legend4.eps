%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 440.000000 20.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 440 20
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 440 20
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Courier
%!FontType1-1.0: Courier 1.0000.1.0000
14 dict begin/FontName /Courier def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /B put
dup 34 /P put
dup 35 /S put
dup 36 /K put
dup 37 /hyphen put
dup 38 /M put
dup 39 /e put
dup 40 /a put
dup 41 /n put
dup 42 /s put
dup 43 /l put
dup 44 /i put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1341 1 index div -838 2 index div 2177 3 index div 2231 5 -1 roll div]cvx def
/sfnts [<


2937101C17412C2422FEE73A2A32472B15C60F2C2C2A2C0EC912433B302A3BFEE823232C41161D10372A2220A42E310D01EC027224202321261DFC721D2823252028271E035CFDC12A202129023FFCA4202528202424281D038E1D2621232024000200580000045C04A20008002800CDBA0028001300032BBB00230006000500042BB8002810B80000D0410500EA000500FA000500025D41170039000500490005005900050069000500790005008900050099000500A9000500B9000500C9000500D90005000B5DB8002810B900170004F4B8000CDCB8001310B8001CD0B8002310B8002ADC00B800004558B8001F2F1BB9001F000D3E59B800004558B8000F2F1BB9000F00073E59BB00020001002600042BB8001F10B900000001F4B8000F10B900090001F4B80016D0B80017D0B8000010B80018D0B80019D03031011133323635342623133216151406232122263534363B0111232226353436332132161514062B011101BEBB9D9C9D9C16312C2A3BFE17222423258146582B242201CFF3FCFAF5AF0412FE3074757374FC7B212428202523232203851F292325BCB7B7BAFECF000001008FFFD3043304C50043022FB800442FB800152FB8004410B8001CD0B8001C2FB900370004F441170036003700460037005600370066003700760037008600370096003700A6003700B6003700C6003700D60037000B5D410500E5003700F5003700025DB80000D0B800002FB8003710B8000FD0B8000F2F410500EA001500FA001500025D41170039001500490015005900150069001500790015008900150099001500A9001500B9001500C9001500D90015000B5DB8001510B9003E0004F4BA0022001C003E111239B80045DC00B800032FB800412FB800004558B8001F2F1BB9001F000D3E59B800004558B800252F1BB90025000D3E59B8004110B900120001F441170037001200470012005700120067001200770012008700120097001200A7001200B7001200C7001200D70012000B5D410500E6001200F6001200025DBA000000410012111239B8004110B8000BDC411B0037000B0047000B0057000B0067000B0077000B0087000B0097000B00A7000B00B7000B00C7000B00D7000B00E7000B00F7000B000D5D41050006000B0016000B000271B8001F10B900340002F4410500E9003400F9003400025D41170038003400480034005800340068003400780034008800340098003400A8003400B8003400C8003400D80034000B5DBA0022001F0034111239B8002510B8002DDC41050009002D0019002D000271411B0038002D0048002D0058002D0068002D0078002D0088002D0098002D00A8002D00B8002D00C8002D00D8002D00E8002D00F8002D000D5D3031250E012322262F0135343633321716171E013332363534262F012E01353436

B8002710B900000006F4B8002710B9001B0004F400B800004558B800232F1BB90023000B3E59B800004558B800132F1BB9001300073E59BB00030003000900042BB8001310B9000C0001F4B8001AD0B8001BD0B8002310B9001C0001F4303101343633321615140623222613213216151406232122263534363321112322263534363321321615020A27403E2825414027B901412725232FFCF828282A2A0131C3292B282801251B1F04BC6C382F58562926FC0D2124291F242423220281252323231613000100BA0000043D051D001B004ABA000C001700032BB8000C10B900000004F4B8000C10B80004DC00B800004558B800132F1BB9001300073E59BB00080001000000042BB8001310B9000C0001F4B8001AD0B8001BD03031012322263534363321321615112132161514062321222635343633210223AA61312927014A1B1E013A2623222FFD1E27292A2A0115048D1F2924241613FB992124291F2424232200000100680000047F03B4003B013BBB002C0006003800042BBB00150006002000042BB8002C10B900000004F4B8003810B80005D0B800052FB8002C10B8000DD0B8000010B900300006F4BA000E00000030111239B8001510B900240004F4B900190006F4B8001510B8003DDC00B800004558B800082F1BB90008000B3E59B800004558B8000A2F1BB9000A000B3E59B800004558B800112F1BB90011000B3E59B800004558B8001C2F1BB9001C00073E59B800004558B800332F1BB9003300073E59B800004558B800352F1BB9003500073E59B900000001F4B8000A10B900280002F4410500E9002800F9002800025D41170038002800480028005800280068002800780028008800280098002800A8002800B8002800C8002800D80028000B5DBA000E000A0028111239B8000010B80015D0B80016D0B80023D0B80024D0B8002CD0B8002DD0303137112322263534363B0232161D013E0133321615113332161514062B0122263534363B0111342623220615113332161514062B02222635343633F21344332A2F2F601B1E498F4D97AD2F322C2F3CDD40242A3A236A65669C233C2A2446B63629292F448D0281202825211613444441BCA6FE3B212427211E2A271E01A0757B8A66FE601E272A1E2325281D000100B2FFE9041703B400400235B800412FB8000E2FB8004110B80015D0B800152FB80000D0B800002FB8001510B9002F0004F441170036002F0046002F0056002F0066002F0076002F0086002F0096002F00A6002F00B6002F00C6002F00D6002F000B5D410500E5002F00F5002F00025DB80008D0B800082F410500EA000E00FA000E00025D41170039000E0049000E0059000E0069000E0079000E0089000E0099000E00A9000E00B9000E00C9000E00D9000E000B5DB8000E10B900350006F4B80042DC00B8


00>] def
/CharStrings 15 dict dup begin
/.notdef 0 def
/hyphen 1 def
/B 2 def
/K 3 def
/M 4 def
/P 5 def
/S 6 def
/a 7 def
/e 8 def
/i 9 def
/l 10 def
/n 11 def
/s 12 def
/Omegagreek 13 def
/Omegagreek.mono 14 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1341 -838 2177 2231}def
/UniqueID 4459673 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5593A4CA8EDA7BA9920B3E316B42F6C580C691FBCE004340131C993D0F1A3A789023FFFC228FE51791ED8110F521503CCE25C52414755D5D3984DD0A27C71220FD57D5901CB3C5B598E419C748E9E02A39234D98B60525967ADEA203AEC1A34CE54516013E7F2FC655251E12DAA13B3736E7D8DC05E2FDA4F214A18BC42547936DBC34C04CBABD22AFC5C2DFCC4E18B3E28E06915B94CC41F99CF4F9086D2F999782AE9BD7CCE0B24786FC21DF956927D7663AD9D8A79ECF5856EF5A82F224BAC218A89F93B435A25162C2A99ED47A6C9F437AB6C2297398DB1AF4EDC9635B6F67A94B7E6BB0A5AEC4F5ACA89E8D2626BD9DD897E4CD70415A80392344DBD59F9B2336601CA03241D03AADD5CC75B4AA6DCBCCADB4C20D1706FBCF46A787D05F80F4C64E5E65E799E55BFD34744017F19FC1FCA267CB6D7BDC0E1BF4C2BBAA0CBB78C302E2856EE95E1567C5010B73CB523182F880754BA9142304E8AA1A17C94C0DB35A0010B66D296BFCD61DA16FD7DFB56D5EF145166BA368ACA0B94F34AC700D3B0F3E8BE3FB6892B05FFBD66D217F1E213AA12889D1AC198B2287B10966ADB6CE68729701C6213EFE7FC34CB741EC997AD3E52FC4AA1304DFA3F50F5A41C161D70ED4487B295F3BCE2F9EFEF5511E099EC43A31DB80076D0BDEA3DE18A1103FC608E0578B3C529DDFA3061F6E6FBE32BFD05AB05B667F342D60701D5BD9214647ED4B72613FBE11DE067987CC8A27714089DB488218EB1545E5876DB0FCAEDA7826A05CBD58D3D98C4B43C659FD6EE1E91047B03DBD9477839A414EF32F10B261A
E00FA3766CA43C4B488583A298D984F1DB5CFC8D0FDE3B5C77DFDB0F89839034965A8599190D6A8355EF099DFE49188497A495BED329CB0F497FDC3D43AFDE853498C192C0FBDF57EF313850DD90653EE3952FC555B3053C6C4954B94E0ADD6A2D7066CB92330E672F68FE36330252C7A23B5CD64FA17D51A07FB879DC2862E0B976107052A989345064987A79B1F6B697573C3E9E33F7E79DC884812670C6F289760CAA0834910C28570091E3ED0C68828A2387E0DD41009D056DBCA0F3287F6B640DFC7B6C252E399F2F9650B43486AF6265165EF9B3FAB987C85D12EBE44B66A53B89AE91DD26F8844DB38F58F4F54846FA210A2E92B8E9D7F39FA69F8AE7AB5E417C84C10ED0EDAE5EA932F9E956781ED8ED5927803797EB73FEBD2B1FD1C283EA3358AEF80F5562A125B609F7FD877CEEA264F486B93E12AEFDF397BE88693718CE07E387C9C442836F4FDE9659BAF122CED4BE6B8A2CE995E7577ABF717C0EF3619424402DF5D09D8F11230375CE259EABED455CDD2A804C660BE61E5042408030455A819A85F9B67C2C11B9B32F7396D93A0D84B6325B22B94C59BBBF15FBD4538DB3242E7DB7CBEB405CD49A103FC3D046F04B3C7604115977D9BD4C6F63B94B27F94CC35401C91425B3B7A71A1746496543FC45EE9022511359669D67A67CABB30A74C086C7326B6D76F66A4E6637264E1606EAE71D67021CCA3F4C30A704AADE9BB3686A479C7F8165FAD60151D80B0698C84F97D7F43ACBB7961481AD4D558CE2A6EE609961DCF2450B61AEF48DD546FEE5A4301B779431FF51ACBEA909A4ABE5E50630D820C327BE75D8D0D17AA16B0C640976E2E2DB8F6640B2ACDE29BCF5180058FCA171C9613357EF4C5DF809B71E4D013E203E404E410377216C7BC6A50755343547192D1BC2564A3BD42247929F9CA0E6BEB8D0FDCB72170F7F169129ED98B9C950E453CB343D0F8675183F5E6EEFE65083CCE9C30394DE83BCB9F8CA39B96E14A92FD9C99A397A57396E091778F6EC1F6F2F3233A6E44702C2A6C389BC92C72566C223AEDFF684ED8213C255E90F6625C721DBC1D7608174B111EF2A562AAF6ACDEEFAB06B174720DDB11884E3E32F6391F4A96EC38E855B3F5ECBECB93E992AA2930EC199638C7190A577241AFB0B82F737401D262BBEADBC1E462A3871C7AFFFAF797244A629462CC7A846D12058FDA76A1BC263BFB4B470642E57ACC782B8C99C7FA4A484301896ABD761DAA018C0699D2E18BEC77D85A45C1A23CD53D5DE1478E205F7599B7223065EDE5B3A94C84D8E04D16C3B2CBF8F2B50458258FD6D72DF9A710C94BEC94902835DE5030CD6CA8764234A6BDD3231431A9515ACD9D2D88A7438DA3CD09B954470C6FC4ED62D523CD818A2E52A04ED35D7BEFD5BD44BA929026F6CD6355C37D86F1F3BAA83E7490FA4DF50F9DD
50BCC01B1FCD2BBE323EEC6407EABBC9929A9496C4FB8F73F106D157C86FE6F83D184E27F30DAB9B82F1B64CCE93879E000E2CC989D235EFFEA088CBF8856E9869217E2F863D5ADF92BFC70A4BF62D5C8416ECD9B9BA6853DF097E3A792CD6634E19B775A0ABDAD539C29809D1F61D0413713C1BF6BDE79A04D2823D5A9798E7FBB43AE52F7720DECD4D9CE3A6A69335C3B0910221CE6729CC6D73878975A7016274BEB6765F465CB70553DC7E4DBAE305E6592A349CBF3935F3F7E8A53CFD07761553BD610601EB2065C6A76A9CE6C6505896CB7C87AA23D24B75D010D786B2E9F348E7134ECD412F1928913ECDB103BA1A5A1FB48EFA526AFD9B8FABBC71286C4850328B07C2B69EFAC42D5CE79D241AA5E67A02FF1F6292E2472E22FC9116914251EDE1A7A4452B7CE0F8EB55544191707CF359132D9389416B5F98545514C83ECBD953D2774BAF706F8F746EFF2AAF942F8962F92D2745649F807853A479F23B265C84BEBE7B4645D926780A143F295310FBAB59128D32F3C089DDAE426945300D77BB85D04E5C8978F3FC9A1F1BB526E9403339ED2AA20CD6485578A3DCB2B55ABD879732B9FFDBF050E30CCF195072DB9DF4633487D6C6A121A8E44C6A8A8A6A13415E6EB1FFE2DA2B5C0C9F47677F88D67A0164F7AB0E5231EF8C97F9F0F8B86B751572A1DF2D2B5757DC649329931F21F8DB70CC7A74E5D7B00753B678D43DF47A9613F1BB229ED676D299095D1DA28FA6A9AB2B1E6B81B346883C87CFCDA8090453DA87D0462DEE5B971FF4FF68E2D5BD67396DB3634806955C05DB88F2B73D1FE221519232397136DE051D1710AF23C532EB0825C6EB3AF7E6552E3D285B86B1D278FA53B1FC8AF44AA110F1F1B8B50CD5194D65429C3908C26556563F0ED3D9BD13AD21A779346EA2D94BCA909E30F806E4BA5AD74CF3E5B2381925140DC7B3C0DD459F254FC6DD5CAD6B6533B7F392EC854C9476421BDA7886976EB134F622CC98BB7C6680EDA2AA113983655B2E660E87EB7B0ED4AB615DA8CCB79305BDF4340A3030A6A6AF392345AD2780620F0DBF0C8C4295933990492A7A66A0396A7F37799518B193D26A421A9A9EDED7A01F1BD882BA77723D205BAA76265E4B38A29C2F85F6338BC8FB96D6CD3331509D3DBFA9E3F84B8D808437AD0DF98034C299C1ECBDACFB55F5878F536B9E11A8710C6D0CD77BAFE40620F0E04F13460367A3AA409514CE4255E2166F643AD5C3154FFF564300D5387F6DA2896BE99900EB26085596398EE622F25F64CDD49FD27FEA233883639F1D5E6AF112DF7984C596DC79A522265A658AFF657C202398244261AC1A9EB43C8E89F0F6B204A180496DF08DD1589508A468371E0FF1A192CC29E940941717739DF2221D61DE1AB8297A81F13E19C0B7900A634B2117678315E40A04CF2A5CEDB64D909B6689
4D21F243D2C999DCFCE7B6981B26FAD354B3955EE91537371000C30998E7B4C3F82B0075186DCF7C6D313CEBC824F62A50B4E79C7AC0A5F6969690B74C281755B07457B0589263DD440326CD9EDE7A32724B7E9D6631E35B2B5E25FB0AAEF3045F1C607C0DFC17BD7BB9005C95A9B4B9E9D1F7B875002E76697CD23A226C1E5555881DDA15D9119707D918706EB8021FEF299D0FC492F24F5CB3AFFEAA43F276E9E1F0CA7AC2005CBAA378AA0E30B4CA4248C28B9677C9E4F7C32F79759D8066112C58E01E94D95D3A57450D355D150FDBECD063BC69C6BA6C9A2F2E276CA3D21EAE8AF32888ECBD1EE91E1003BA23438E27EBF0EC0DB9A1FCA3B20654D600582A8ECCD00A8F67E804F4CCC401370E7B3B8A71487DD029C511017316FC59E52F0B1FE09C547A56F91655100C407C3BE9F0C4C297ADE1410101E0106845A3C730D8226225DE1FCD5785868C4A35D2926ADC60BBF822524652885AB7387C985E64707AC7A73D0C16206BE050B5C53D23CA924981F251F6C9C7CDFE94FD19E9837DF1FD36AA5FA8B4E43A25C67A5F40820CD70D16E6123F5A3308890A2D164211EC49CD3CDCD011C2BEEF5C6D04280C2075FC108B11F5166A2C4BEE2A9FED7D0229DDE14DCF4B1C1D878C867F58C6870AF08ED44FF19EAC6478962BE14381DC3FF113D11463AB0CA4060BDDD154340F2EFB41A32897C2519B6024182355D7B67D8D7AD28734AF037C898A737513BCAB9F83BC3BC98C68C2DF95257C6E1D6C5269922D3A2E7126E4B17941C3A7AD13BAB30FBBFEA49B5E67E7AAD8504FB7F9C77AC33712C6E3228BE000C3EEA1908EEFB357A8FC0E77CCC91579A0367450F9E4C71102F6CC76B2F94ED9F3B39D6D198C5B90C67778EC507256FD1C93404BA2F2657E011B7C428B91DA0DC63760FA3BFFBC30756E7846A5BC5CCF0AD1BD493D193420835665A259E2C9747A61C1E4B3BB1C03B79D0FC0A932CF9EF712E0A46DD6A60CB5FB24701630AFFD13E1E57913A85A9EED5828FE93634DEA0D0457996D1FA79711E38ACDEBCF495CE98240A262C51A11BADC6E9EB4A68F3CC6751984F294C177109C58F69A78EFAC69C3BB93E1A92D3D9F4C33296B4ECE04C05857704263C4903AAB3F6CFC5B6F9504BC43727CB0F1163910F8619B2846D95B721BCC885410D66B3514CD22A12ED0C8F0574C41DE83F092E1C320899EF895A887240FBE95F9B755A39E6E046476AD8520E829B0FA678AF7A33105575E37B08874F37DB02D79253FF0D9310554EDE43CBC4957109861E6C34381BB4D3BB9A250AFB74EB224F3B5BA6D2AE7AE7631BA9F8F75FC9695429AC6249E82599ECF694B32F84A9A96F2295D62E41BB07C972C285FD40E0602610A22B3F5409838AFCFC8D5936EDC474096427DDCB258
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Courier cguidfix
/F1.1/Courier renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 440 20 rc
1 0 0 -1 -9 25 cm
39.007874 8.0119419 m
100.80315 8.0119419 l
100.80315 22.011942 l
39.007874 22.011942 l
h
39.007874 8.0119419 m
S
0.5 w
/Cs2 SC
0 0.61960787 0.4509804 sc
39.319462 9.5243635 m
51.345848 21.550747 l
51.257454 21.639141 l
39.231068 9.6127577 l
h
39.319462 9.5243635 m
S
48.978195 7.8273549 m
63.008976 21.858135 l
62.920582 21.946529 l
48.889801 7.9157491 l
h
48.978195 7.8273549 m
S
0 0.58039218 0.42352942 sc
60.641327 7.9873357 m
74.672104 22.018116 l
74.58371 22.10651 l
60.552933 8.0757294 l
h
60.641327 7.9873357 m
S
72.304459 8.054265 m
86.335236 22.085045 l
86.246841 22.173439 l
72.216064 8.1426582 l
h
72.304459 8.054265 m
S
83.967583 7.9873357 m
97.998367 22.018116 l
97.909973 22.10651 l
83.879189 8.0757294 l
h
83.967583 7.9873357 m
S
0 0.61960787 0.4509804 sc
100.64171 10.147055 m
88.615326 22.173439 l
88.526932 22.085045 l
100.55331 10.058661 l
h
100.64171 10.147055 m
S
90.938339 8.1426582 m
76.907555 22.173439 l
76.81916 22.085045 l
90.849945 8.054265 l
h
90.938339 8.1426582 m
S
55.815029 7.9157491 m
41.784248 21.946529 l
41.695854 21.858135 l
55.726635 7.8273549 l
h
55.815029 7.9157491 m
S
67.522797 8.1426582 m
53.49202 22.173439 l
53.403625 22.085045 l
67.434402 8.054265 l
h
67.522797 8.1426582 m
S
79.230568 8.2922649 m
65.199791 22.323046 l
65.111397 22.234652 l
79.142174 8.2038708 l
h
79.230568 8.2922649 m
S
95.630714 8.2038708 m
100.64171 13.214864 l
100.55331 13.303258 l
95.54232 8.2922649 l
h
95.630714 8.2038708 m
S
0 0.6156863 0.44705883 sc
44.107262 8.2922649 m
39.096268 13.303258 l
39.007874 13.214864 l
44.018867 8.2038708 l
h
44.107262 8.2922649 m
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 11.92126 9.9247999 cm
/F1.1[ 12 0 0 -12 0 0]sf
-10.801758 4 m
(!"#)[ 7.201172 7.201172 0.000000 ] xS
1 0 0 -1 166.78543 9.9247999 cm
-25.204102 4 m
($%&'\(\)*)[ 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
199.37206 16.988058 m
261.16733 16.988058 l
261.16733 2.9880581 l
199.37206 2.9880581 l
h
199.37206 16.988058 m
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -9 25 cm
208.37206 8.0119419 m
270.16733 8.0119419 l
270.16733 22.011942 l
208.37206 22.011942 l
h
208.37206 8.0119419 m
S
0 i
1 1 1 sc
CM
199.68364 15.475636 m
211.71002 3.4492533 l
211.62163 3.3608594 l
199.59525 15.387242 l
h
199.68364 15.475636 m
f
0.5 w
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
208.68364 9.5243635 m
220.71002 21.550747 l
220.62163 21.639141 l
208.59525 9.6127577 l
h
208.68364 9.5243635 m
S
0 i
1 1 1 sc
CM
209.34238 17.172646 m
223.37315 3.141865 l
223.28476 3.0534711 l
209.25398 17.084251 l
h
209.34238 17.172646 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
218.34238 7.8273549 m
232.37315 21.858135 l
232.28476 21.946529 l
218.25398 7.9157491 l
h
218.34238 7.8273549 m
S
0 i
1 1 1 sc
CM
221.00549 17.012665 m
235.03629 2.9818845 l
234.94789 2.8934906 l
220.91711 16.924271 l
h
221.00549 17.012665 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
230.00549 7.9873357 m
244.03629 22.018116 l
243.94789 22.10651 l
229.91711 8.0757294 l
h
230.00549 7.9873357 m
S
0 i
1 1 1 sc
CM
232.66862 16.945736 m
246.69942 2.9149554 l
246.61102 2.8265615 l
232.58023 16.857342 l
h
232.66862 16.945736 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
241.66862 8.054265 m
255.69942 22.085045 l
255.61102 22.173439 l
241.58023 8.1426582 l
h
241.66862 8.054265 m
S
0 i
1 1 1 sc
CM
244.33176 17.012665 m
258.36255 2.9818845 l
258.27414 2.8934906 l
244.24336 16.924271 l
h
244.33176 17.012665 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
253.33176 7.9873357 m
267.36255 22.018116 l
267.27414 22.10651 l
253.24336 8.0757294 l
h
253.33176 7.9873357 m
S
0 i
1 1 1 sc
CM
261.00589 14.852945 m
248.97949 2.8265615 l
248.8911 2.9149554 l
260.91748 14.941339 l
h
261.00589 14.852945 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
270.00589 10.147055 m
257.97949 22.173439 l
257.89111 22.085045 l
269.91748 10.058661 l
h
270.00589 10.147055 m
S
0 i
1 1 1 sc
CM
251.30251 16.857342 m
237.27173 2.8265615 l
237.18333 2.9149554 l
251.21411 16.945736 l
h
251.30251 16.857342 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
260.30252 8.1426582 m
246.27173 22.173439 l
246.18333 22.085045 l
260.21411 8.054265 l
h
260.30252 8.1426582 m
S
0 i
1 1 1 sc
CM
215.8042 17.084251 m
201.77342 3.0534711 l
201.68503 3.141865 l
215.71581 17.172646 l
h
215.8042 17.084251 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
224.8042 7.9157491 m
210.77342 21.946529 l
210.68503 21.858135 l
224.71581 7.8273549 l
h
224.8042 7.9157491 m
S
0 i
1 1 1 sc
CM
227.26198 16.857342 m
213.23119 2.8265615 l
213.14279 2.9149554 l
227.17358 16.945736 l
h
227.26198 16.857342 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
236.26198 8.1426582 m
222.23119 22.173439 l
222.14279 22.085045 l
236.17358 8.054265 l
h
236.26198 8.1426582 m
S
0 i
1 1 1 sc
CM
239.21974 16.707735 m
225.18896 2.6769552 l
225.10057 2.7653491 l
239.13135 16.796129 l
h
239.21974 16.707735 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
248.21974 8.2922649 m
234.18896 22.323046 l
234.10057 22.234652 l
248.13135 8.2038708 l
h
248.21974 8.2922649 m
S
0 i
1 1 1 sc
CM
255.99489 16.796129 m
261.00589 11.785136 l
260.91748 11.696742 l
255.90649 16.707735 l
h
255.99489 16.796129 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
264.9949 8.2038708 m
270.00589 13.214864 l
269.91748 13.303258 l
264.90649 8.2922649 l
h
264.9949 8.2038708 m
S
0 i
1 1 1 sc
CM
204.47144 16.707735 m
199.46045 11.696742 l
199.37206 11.785136 l
204.38304 16.796129 l
h
204.47144 16.707735 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
213.47144 8.2922649 m
208.46045 13.303258 l
208.37206 13.214864 l
213.38304 8.2038708 l
h
213.47144 8.2922649 m
S
0 i
1 1 1 sc
CM
257.04437 16.857342 m
243.0136 2.8265615 l
242.9252 2.9149554 l
256.95596 16.945736 l
h
257.04437 16.857342 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
266.04437 8.1426582 m
252.0136 22.173439 l
251.9252 22.085045 l
265.95596 8.054265 l
h
266.04437 8.1426582 m
S
0 i
1 1 1 sc
CM
244.81392 16.730143 m
230.78314 2.6993632 l
230.69475 2.7877572 l
244.72552 16.818537 l
h
244.81392 16.730143 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
253.81392 8.2698565 m
239.78314 22.300636 l
239.69475 22.212242 l
253.72552 8.1814632 l
h
253.81392 8.2698565 m
S
0 i
1 1 1 sc
CM
233.74086 17.084251 m
219.71008 3.0534711 l
219.62169 3.141865 l
233.65247 17.172646 l
h
233.74086 17.084251 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
242.74086 7.9157491 m
228.71008 21.946529 l
228.62169 21.858135 l
242.65247 7.8273549 l
h
242.74086 7.9157491 m
S
0 i
1 1 1 sc
CM
220.82695 16.707735 m
206.79616 2.6769552 l
206.70776 2.7653491 l
220.73856 16.796129 l
h
220.82695 16.707735 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
229.82695 8.2922649 m
215.79616 22.323046 l
215.70776 22.234652 l
229.73856 8.2038708 l
h
229.82695 8.2922649 m
S
0 i
1 1 1 sc
CM
209.53819 16.33535 m
199.5162 6.3133645 l
199.42781 6.4017587 l
209.4498 16.423744 l
h
209.53819 16.33535 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
218.53819 8.664649 m
208.5162 18.686636 l
208.42781 18.598242 l
218.4498 8.5762558 l
h
218.53819 8.664649 m
S
0 i
1 1 1 sc
CM
238.5002 16.796129 m
252.53098 2.7653491 l
252.44258 2.6769552 l
238.4118 16.707735 l
h
238.5002 16.796129 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
247.5002 8.2038708 m
261.53098 22.234652 l
261.4426 22.323046 l
247.4118 8.2922649 l
h
247.5002 8.2038708 m
S
0 i
1 1 1 sc
CM
226.85037 17.172646 m
240.88115 3.141865 l
240.79276 3.0534711 l
226.76198 17.084251 l
h
226.85037 17.172646 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
235.85037 7.8273549 m
249.88115 21.858135 l
249.79276 21.946529 l
235.76198 7.9157491 l
h
235.85037 7.8273549 m
S
0 i
1 1 1 sc
CM
214.97537 17.047646 m
229.00615 3.016865 l
228.91776 2.9284711 l
214.88698 16.959251 l
h
214.97537 17.047646 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
223.97537 7.9523549 m
238.00615 21.983135 l
237.91776 22.071529 l
223.88698 8.0407486 l
h
223.97537 7.9523549 m
S
0 i
1 1 1 sc
CM
203.72124 17.070736 m
217.75201 3.0399554 l
217.66362 2.9515615 l
203.63284 16.982342 l
h
203.72124 17.070736 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
212.72124 7.9292645 m
226.75201 21.960045 l
226.66362 22.048439 l
212.63284 8.0176582 l
h
212.72124 7.9292645 m
S
0 i
1 1 1 sc
CM
199.6412 10.296106 m
206.65659 3.2807162 l
206.56819 3.1923223 l
199.55281 10.207712 l
h
199.6412 10.296106 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
208.6412 14.703894 m
215.65659 21.719284 l
215.56819 21.807678 l
208.55281 14.792288 l
h
208.6412 14.703894 m
S
0 i
1 1 1 sc
CM
250.18358 16.823524 m
261.00732 5.9997797 l
260.91891 5.9113855 l
250.09518 16.73513 l
h
250.18358 16.823524 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
259.18356 8.1764755 m
270.00732 19.000221 l
269.91891 19.088614 l
259.09518 8.2648697 l
h
259.18356 8.1764755 m
S
0 i
1 1 1 sc
CM
261.00699 9.3316135 m
254.99379 3.3184214 l
254.9054 3.4068153 l
260.91858 9.4200068 l
h
261.00699 9.3316135 m
f
0.60000002 i
1 0 0 sc
1 0 0 -1 -9 25 cm
270.00699 15.668386 m
263.9938 21.681578 l
263.9054 21.593185 l
269.91858 15.579993 l
h
270.00699 15.668386 m
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 339.6496 10.251863 cm
-28.804688 4 m
(!\(*'+,\)')[ 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 7.201172 0.000000 ] xS
/Cs1 SC
0.64705884 0.64705884 0.64705884 sc
CM
375.73624 16.597736 m
437.53149 16.597736 l
437.53149 2.5977368 l
375.73624 2.5977368 l
h
375.73624 16.597736 m
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -9 25 cm
384.73624 8.4022636 m
446.53149 8.4022636 l
446.53149 22.402264 l
384.73624 22.402264 l
h
384.73624 8.4022636 m
S
ep
end
%%Trailer
%%EOF
