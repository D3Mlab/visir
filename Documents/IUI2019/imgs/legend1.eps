%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 755.000000 25.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 755 25
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 755 25
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Courier
%!FontType1-1.0: Courier 1.0000.1.0000
14 dict begin/FontName /Courier def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /G put
dup 34 /r put
dup 35 /e put
dup 36 /d put
dup 37 /y put
dup 38 /O put
dup 39 /p put
dup 40 /t put
dup 41 /i put
dup 42 /m put
dup 43 /a put
dup 44 /l put
dup 45 /B put
dup 46 /P put
dup 47 /S put
dup 48 /I put
dup 49 /n put
dup 50 /K put
dup 51 /hyphen put
dup 52 /s put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1341 1 index div -838 2 index div 2177 3 index div 2231 5 -1 roll div]cvx def
/sfnts [<








1E222120231E2C1F143578515E7376C3D0C0D4B4398C6A233211232548B22C2638221136415646473C8E8784922B27323275352F332312312B53403F360405878D87A2151917173100010058FFEE046204BA003000BDBA0007002300032BB8000710B9001E0004F4B80027D0B8001E10B80029D0B8000710B8002FD0B8000810B80030D000B800004558B8002C2F1BB9002C000D3E59B800004558B800172F1BB9001700073E59B8002C10B80006DCB900000001F4B8001710B9000B0001F441170037000B0047000B0057000B0067000B0077000B0087000B0097000B00A7000B00B7000B00C7000B00D7000B000B5D410500E6000B00F6000B00025DB8000610B8001FD0B80020D0B8000010B80026D030310132161514062321111416333236333216151406070E01232226272E013D01112322263534363B013D0134363332161D010377312D2A2AFE6B55675BFE1E1C27313B629D45759F271411AA2A2634557125272C22036422252323FEB2A4686A281D21311727244B4A2360641F014E2125291ECD352B293259CB00010039FE71048D039C002F014CB800302FB800252FB8003010B80014D0B800142F4105000A0025001A0025000271411B0039002500490025005900250069002500790025008900250099002500A9002500B9002500C9002500D9002500E9002500F90025000D5DB8002510B8002CDCBA00000014002C111239B8001410B8001BDC411B0036001B0046001B0056001B0066001B0076001B0086001B0096001B00A6001B00B6001B00C6001B00D6001B00E6001B00F6001B000D5D41050005001B0015001B000271BA001F0014001B111239BA00200014002C111239BA00210025002C111239B8002C10B80031DC00B800004558B800172F1BB90017000B3E59B800004558B800282F1BB90028000B3E59B800004558B800072F1BB9000700093E59B900000001F4B8000ED0B8000FD0B8001710B900110001F4B8001ED0B8001FD0BA002000070017111239B80021D0B80022D0B8002FD0303101333216151406232122263534363B0113012226353436332132161514062B0109012322263534363B01321615140607021B2B49342927FE332F252727D9A2FE914231282801173826324325010F01142745342639F729272C38FF001F29232420272424013F02CF202823231F272820FDD902272028271F2323262002000001010E0000051704B4004501CABB00350005003D00042BBB00280004003900042BBB00010004001000042BBB00430006001900042BB8004310B80009D0B800092FB8001010B80012D0410500EA001900FA001900025D41170039001900490019005900190069001900790019008900190099001900A9001900B9001900C9001900D90019000B5DB8003D10B9001F0006F4B8002810B80026D0B800

00>] def
/CharStrings 23 dict dup begin
/.notdef 0 def
/hyphen 1 def
/B 2 def
/G 3 def
/I 4 def
/K 5 def
/O 6 def
/P 7 def
/S 8 def
/a 9 def
/d 10 def
/e 11 def
/i 12 def
/l 13 def
/m 14 def
/n 15 def
/p 16 def
/r 17 def
/s 18 def
/t 19 def
/y 20 def
/Omegagreek 21 def
/Omegagreek.mono 22 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1341 -838 2177 2231}def
/UniqueID 4459673 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5593A4CA8EDA7BA9920B3E316B42F6C580C691FBCE004340131C993D0F1A3A789023FFFC228FE51791ED8110F521503CCE25C52414755D5D3984DD0A27C71220FD57D5901CB3C5B598E419C748E9E02A39234D98B60525967ADEA203AEC1A34CE54516013E7F2FC655251E12DAA13B3736E7D8DC05E2FDA4F214A18BC42547936DBC34C04CBABD22AFC5C2DFCC4E18B3E28E06915B94CC41F99CF4F9086D2F999782AE9BD7CCE0B24786FC21DF956927D7663AD9D8A79ECF5856EF5A82F224BAC218A89F93B435A25162C2A99ED47A6C9F437AB6C2297398DB1AF4EDC9635B6F67A94B7E6BB0A5AEC4F5ACA89E8D2626BD9DD897E4CD70415A80392344DBD59F9B2336601CA03241D03AADD5CC75B4AA6DCBCCADB4C20D1706FBCF46A787D05F80F4C64E5E65E799E55BFD34744017F19FC1FCA267CB6D7BDC0E1BF4C2BBAA0CBB78C302E2856EE95E1567C5010B73CB523182F880754BA9276B95800F49D6AB1BFDD84EB9285C3EFD1CCA9A1DEF2F7BDD2A6C1845FB445C3B708DB4497831F9F3A0B600FF83023B03E84248D0161429556EB0B68F3FB4C94983B5A1224F4BBCA03EDF29456CBB546793C68D5B48986BCB7BD48CC8A6DF8E0726D8DE5E67D6AA6EAEFB45405DEBA2294AF9783AF067F029378341AA972B848EF73D2DCA5D7C288D70965B2B2DB2733E09439F2A2B44D8EF67DBA374667B3DFC4EB4965761C2F0BE4591B265098BE88BD67DD4DD69A1C85D4BCF9561D97BC2940C582C91BF7083093DBCC6BF1A286C3098037C193BC95C5786513E8B14C7A0D0313CD5DE7783E4A82ACF8
06CEBB03275F0AED8B273E9FF1A80BFF599DF5CCBC1529A36FAF711E41AFB9779FE5880161314381366925470DAD3A9EC890BAF1291C5C958472569372EEAA5CB61DE444F45DA3479E7A1A470AE46ACBF27E06139F53938663B8CE42625F59D1BDE853B2E0A8092C3BD9F088337368FF571FC2382C7A89A4487712143244510D80CF5D991E147ACDE699A6567040C7B964ACF0140B37E601C387E7FF0FA22252E5EDDA102885285E6C27DE237F89C00FB0EF7D522B2249A258F7C6752B27E86BC607822298B2C146AA36CFF4BBE083FB1CD3FCB59F74955B488A6BDD11A8A3B94A990C78F69E56E8542D53DB73E97F935A5BF69E4B1C9C0266B739E6D871DE56CE9C001E426018F74D4D54F2A6E2D31FCAB6516C1F6F34031F1F9CD36D66EFC22553E543E21CBF424ED211D3C32388CD6D8AFD6A2D69D1356450469B2FD57C2AC47B062DD3410DDB6EE3B26EFBDFD109B87507D9C981738D7BA9F3074B7BB0AACA2D5E0905959C692BC35B3D6835478986A557631991550F344BE4890A62672228DEF12BF21AF0C2E25E4881CB7FD75CD37221AA27B1075345A24FDDE37F6FA1D8F515C82C4846C0582C3F79BCF5105C48E45D113ED0F4C2ECFF022E6262F354B7BD4007F69E6743A511F2DAAC050D580625632FB96249C384CB75BCCDBBFC195DDE32F7A16235B781AFB077BFD10EE7799EDFA93D39ABB5366B615CC2F95CEFC92F95B443EB88D74711B3C8FB52A7AA7942D784DAECF774D70C24988E805876EB23EE7157071A476BF2D53E3AE0A21F7AD0BC9B39550036056239924460EF6E0B13322CB3B848826EBAC003BD955C0A2ACD57B462C4E4BD92B585DEF5F18F8F9532D04A56967B9FC8E949FCA9446FE210CA39AEC651EA0851CDAF948DBB7F4B62948D20D5DE8B3F20F7EB1B45D81ED36EF7A72FA82887C57F59582D9E99C4BF0E073706A826C6E5FAAD044A2407B23D858659F199DDF3C5C0B645B42EFD33747F36D077020E2E86455170E1E5FA884F0936FBAD839EE474DDA1158011F1AB1778F742292D26269918C4C46F9B69461546C779A850C5C60BDB1BAA53052BDE261DB1A4FA7E459A7ECE9E5C2D04A85D709E2191033653364B424AC460543C67502379A81A0DB3D373826B612BACADF720BC73C704CD38ABDF8BE0C9A6A0C7B464B5CF81D91A5181A43DBF76ED281ADD525EEB1E2D1154CA55DA2145A4D5713E40409FA33598F2902B8F810F6A73C7667CC755EC5FB801DB0F2BD37FC50294087DCE97AB735FAFDFFFD8051E5A7334EF5D99E6DCF43E8F34E38D635C09AD2E610D80F0DADF0D4C0953A94C03456CF073E221B1EBDD576BC6A6BA3F90E1CD2C6C547F4944EC5982AE278EA4D769FC1E9285DC079340F6A42037AFB5E9436CAB6EDE6CE90267670643DE89AA5AD8E159EC988444DA45246BE11E774AE397A00329B6
D770B5D89804F27D8FB39E963C1B91C575568F16C04BC48B0EC8DB28AA0B7152FB3FF3E924DCF0D7088006031BD2914F28549301FB0FA62FA55EFE975D40960B47EA8E2D3FEBF28297B9B6A3BF7F06E42EC8DA3DE74753101FA7F60F468385B0D763487DB656F395D6362CFB06578CBB494266DB74222CBA0FE3A9ADE69AEC55088AB6564C8754FDD550928FB382213400E7C42177225B545199A2AB3E269563789D28E1A0C43F41E919D37F1388295D3A3B5697357F887BEC7AD5B54A5F18845B5DED95A7DC402C0187A40367EB0EF664A59979AAB424841AA8F4EEBC2D7D61AB02A6DE1E3FB5E58E5A3D0515B1AE9BB7FB17C3A73BC3D69EC3FE97942F2A47F93B48B1A51ED424C691185A71D43EE06B79887007A0DA6E897C15A4985BA49866CC7E6E0F4C0A10AA967AB664FEDD01E3D6C91C461AB44C9DBDDECB34222710F96767DF8636BC5D5CAB3AFD9CD50457D45DC9DD282EB1BF366AC47B0910ECA082573F1938A7E96DC887863D265094867921841072217AFC0F9C93ADE4F4F5D8ABE7015BC0AB48F348390E5DBD8656928015DE2D7AD77F162D1B27884D4595AEF1ABE7FD0274D03AB489047CDFFE5DB90E7A3E75CEC453FAAB8CDA6629FC13CA5AD3B40617DC3E68585CA7DA8A3610926EB347051AA1A4CC7B3EAE21AFB1F672C01D957510F0690325C7AF32E0067EB5D92063113551C76A96B795BA519DB4DD08713FE703E1AE6EB1F120583BE511426F76DF35D7BDFEE8F69BD533FAE18DA317CAA3FD3C6DB03A659F7200CEB7FB0607F99E893ED7D7E3DD73D92C853419D014AFD487B01B9825A741752336AC0475E380127F122F3360FD4E9925D6CC53BA744D370478E38C4F40EDD1D39027B76845B435B4BD02107E0FA6762ACCC1D9686593F2B7884E6E2AE3392469DC20161ECD53A4D842B63A925225AC2A356AFA48969EEB9F45A5A02080D6580DCDC11819EF96D53A164C090D3E05BE4C1841F32D3C02BB45E9DA17395C31FB6AFAEF0F525F68AF9921325CCA3088850A780A0FFF0E5F5DE39FE19A4C0D6B198B6B3C0CCD643F41089139CC5AF32D06AED951F0F3A2845411235D9F0A73083D05510C71892061C2C4BF4628DCC07C13D16C48730845DB5F77243310650A6A51A4A09E5EEE694AF4362BD457C42F5D83AA2F75F43992494EF68343C1D921289DD14CB364529001F46401D19A1E422F3450F00B815FA42CD4B09A689BF78D4CA767C753FB9CA4D9CBAA2A06B2C8DC245F5B8FAA41FBEDF9E41715CD496CBDE78663F8A8DCE2FCBDD323FF638198A062366C02909A5378C689ECD1A5D0E8AB8E1B62954931257D91A8FE1FEEE4C4A801A166A07EF2E8D28D7F6D9104DE8749A783D64517C699EDF58E8E5BBC23074A6092E381D95043D54562B02D234F0749248009C718E46F30765DE1FEC7F72E396E239EF71A1B3D
5BBC033F44813CBFC17622C7753509CCDB809A76E93E3D15F4E58837920B7EC3407567EFCD9E43433196C01C31213DFEBB538D05C5DD2224ED9333490390528B0EF2F3E8A0A8EA5FD4E4DA95584BFD8C1521C06037D779AC86416D333A3DCABD9676AA6AC0F6131F1FFD3ECCE282F224EF6F5BDB6BF667221EF70869BE8AEA24F4312E7FE2792335B6CE8E4A5D0FFB22B5606A46EAFA07AD356375EB517212FFDD59A6FF09C9F5F8B09B99B6871C620E7764523EFCBF09F2F6C1157C0DE92668034EBF34C641AD6DD12345E0F51AF8DACAD490E1B36C09ED7E40F7D7B00E33AD9623228288D2A32CC5B0CBF1C3D974D5C8147246B27391C78F160A3400487F0D3A98895A150DB17FC4AC9EEDCF42C188D8117A8516317BE8643B4DC4BA8548C22BD500288522AF9FF55E5080E7EA9EE7E3461A59B5F66E06C550F4C9B937F077EC0886E3B6EEC21213D3F5C12001175CEF3BE59CA0A25EAC5AC1246041923D6606B593233CDEFF736CE80F30AEF0C250160BBBE987E5BDEE849F271CF9CD2FA6A1C0E144D70E37F4B0F2D4C2AE0203405C0EA8086694DA3AEE20547CAA9665BC27D7EFE2E214C0E2CC65CA8EFCE05AE26AB9085A6B6CF293EBF779A66B1754DE65FC33B0DF10BDA017FFC7A1240E189FA0BDCD5DC467E485CD6E2294C4A2959A3D033AC1B8A92C1FF6F87A2222EE17BE1E729DBBF4BE63729EC1CB4BC3B0E527C4675113911BE6567E37C08A3C9994635F974E702C4E0AF34F45B95C8CE6EE16E0AD3BD6EAAB90B7D186B1ED23E30F32123BCE145799A81D525FA9485D85E84580F1DAA716B5DE08CFBA3862A8E249B306DE4E1574788A7BED99B67FA06980A3025CA1C6E89055DD04D125432C01C6B568B4985AEE9A42141CD5930898D2ACBB8EC78183B1FF1954722B6AB7141D942B1E96200A613F5CA7EF25C3220038531FCAB29F241E69728CC1BFC8F2F4326EB717CDBD39893E808E1027F2C19264C29FAE514B1D12E46D6BD3E653FB88D9C03975F75F499BC60B0E4A14C4BC7B0F671237BB4C66D88EF9753D3B099FDFE0B1C66A0D64D61A15FAFC937896D9C783811456EE6874C9100808B0C1FBE1E917499C027E75CDA51C071AF14F8944828C1D883701018080410FD92BD5A57BA4259CE35F112CC0A2C55FEC2B6E9907926DAA39F41B27ECD6F6DA348F893EB4EA53883F9F70E3D65D392FB4D699025ACF4BABC1A0F336A2CCE24BE015F078D6321299320886ADF93F21C7F6FF28EAE33D79F0D0B895171FE769A2BE3057AC13A248540790E2C12CE86F3C7262966BCA82D526EB31BB76AE6FF2B651C2858E49CB829FE9D78A034090B4939932C05C590320DBBF62833F4A42D22CF6356BCAC2A0719226FB046DA84B1A2C2D19E0FF58B2DA3BD235D44ACA5495328FEEB17EBE62DFAD64BDF965077CCE647F56279A1AFEBEEF8C
B1637C709AE16D48D50D5EA5733D6A7173D94F7335C3A78F2E22B667D535F5DCA0161C9881B8C71814600D1310C09ED16F82E99D0E36E102B28B59711066FB68F2DCCBE549DA50E179A9B10BB02542896FA0B072BE7AC4553A690B69DB490180751EE7059481CF1784EB0BABE7D8EC839DFA03F651596BB8683F0EE95EFB37B55DC603362F23997D4C1077658F3BC09D4B2DE739DBF10ED3BFDFE3856D21E212D5EE3C53C3B55B92D95988E6C7268D0E27E50E9B98C79ABFE04BB9A0B5A54E48DF3C9E40A8404C0A6A34008529EE1ED22B64E670A3212D83EFDC1126D224BF5CC11425B2EA399831BDC7F7D8084BC3A6CC1112D7DDF382F3C59B45A7D896A53BAA2CBB52A351FAD7DE39060F8709F5681E06F2DCBC6C54E63073BCCC15C5CF98BE174C5205FC6F5091E38281F49D56ED412995F17697752CDD3A1709CB2C77F6CE6A7B681A04122250BB03D10AC80628BD63AF2E1C42FC23369753040AEB8631FD79E5EE11B17E9AB2FB056772C1C80B7107CDEA5F5E9B2E87F882D3DACC2847D16B1128597B55C772AEB01AB0E93EB83340A5704931844FF2664A3FDF03591BDFFDF7F9E23DEC839B5FED5F841259ED4BDB9393C61F8C947382657F4A8BD90B19F278BCE8385288B6CB1B44C2500C46041BB7164D507BB8A71D74BDFED704CA98B1E07C9DE75C05C2E0595E22A4F68D8534E0C4C1FA2B7F444008E296D9E8FDA504CC7EF9469AE4CF447C44B277436B785A3CA4DABE6BD2CDEE87EC22BB38A754E9FC4A0C06FF46DE71FC74E0B5E6605A520A5285D7D3F109C894A53A6B29B3215A92C52251037F781F5B9C1A449A56B9BCB121E53DB09D2C1FFA83675531BD2371C8A62ECCE805A6DCAAC3A83ACF8DFFAE216F00007CA0CED6B6A0C871A5FC52F70FBF65F59C438A7A9CA728FDCA219D8D9E0F677F8CE3C7BA7010B794A6849C0E9E69EA3D796FF68F563139FAD6F78FF2A14E20A8A4BCC5C9957F4C41D3CC2430AF0FEAEDE37CD45F17B61C78AA828FD180DF9F2B3F4387C9449CCC8BA4F98BD88C32FF50818759E330FBC0273063A007AB51C4C96C270F9A396DA95AD0DA35108BB29A8F410A27844A6242509D226FDA1628100AE1E7D0745DFB4F35A0EE8A0A57CB167BACC6990B9D745FCD722DFD558CE39F6AD747C765A5F8F7DEC22C122E81B31687CEB1FE64235B061F9EBBA37318270160B192D380A8EB35C1244A4590EDBDEF178FFD060ED8D57BBE64273DF792D96855C4040059329E695B4ABEFC8736F4A25CBC6EC2449CC93C8B862263129CE358B8DA028E49F52B7D1241881395D37663DA237C292C3CFDA9F1FA3CAB56567986D1852F976053A24B7EB794D571E783C472C5B9BD866332AD0A1BC699694773FEED644B3C57EC859ADD06A47F3E76248992188FECD88417D8009E64A8BE7164AAB37AAA9420F2105F5C5DB0

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Courier cguidfix
/F1.1/Courier renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 sc
q
0 0 755 25 rc
1 0 0 -1 389.00131 12.166667 cm
/F1.1[ 14 0 0 -14 0 0]sf
-25.204102 5.5 m
(!"##$%)[ 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
3 w
1 J
1 j
0.60000002 i
/Cs2 SC
0.26274499 0.63529402 0.89411801 sc
1 0 0 -1 -3 31 cm
306.83203 18.746719 m
357.83203 18.919947 l
S
327.31372 23.714529 m
337.35031 13.952138 l
S
337.28177 23.783081 m
327.38226 13.883586 l
S
332.23508 25.833334 m
332.42896 11.833333 l
S
339.33203 18.833334 m
325.33203 18.833334 l
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 550.33533 12.166667 cm
-29.404785 5.5 m
(&'\(\)*+,)[ 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
0.60000002 i
/Cs2 SC
0.88235301 0.56078398 0 sc
1 0 0 -1 -3 31 cm
464.66602 18.333334 m
515.66602 18.756559 l
S
2 w
483.02261 11.207852 m
497.19583 11.207852 l
497.19583 25.381081 l
483.02261 25.381081 l
h
483.02261 11.207852 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 243.66733 12.166667 cm
-12.602051 5.5 m
(-./)[ 8.401367 8.401367 0.000000 ] xS
3 w
0.60000002 i
/Cs3 SC
0 0.619313 0.451406 sc
1 0 0 -1 -3 31 cm
170.49803 18.333334 m
221.49803 18.756559 l
S
2 w
200.95224 13.28348 m
203.71974 16.050972 203.71974 20.537962 200.95224 23.305454 c
198.18475 26.072962 193.69775 26.072962 190.93027 23.305454 c
188.16275 20.537962 188.16275 16.050972 190.93027 13.28348 c
193.69775 10.515972 198.18475 10.515972 200.95224 13.28348 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 90.833336 12.166667 cm
-29.404785 5.5 m
(01\)\(\)+,)[ 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
3 w
0.60000002 i
/Cs3 SC
0.58135444 0.0048924065 0.82820129 sc
1 0 0 -1 -3 31 cm
7.3293962 18.333334 m
58.329395 18.756559 l
S
2 w
39.867531 24.381115 m
32.780914 10.207888 l
25.694302 24.381115 l
h
39.867531 24.381115 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 724.50397 12.166667 cm
-29.404785 5.5 m
(23*#+14)[ 8.401367 8.401367 8.401367 8.401367 8.401367 8.401367 0.000000 ] xS
3 w
0.60000002 i
/Cs3 SC
0.988235 0.0509804 0.105882 sc
1 0 0 -1 -3 31 cm
630 18.333334 m
681 18.756559 l
S
2 w
655.44324 8.272481 m
665.46521 18.294466 l
655.44324 28.316452 l
645.42126 18.294466 l
h
655.44324 8.272481 m
S
ep
end
%%Trailer
%%EOF
